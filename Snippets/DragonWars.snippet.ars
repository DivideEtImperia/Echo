&?addNPC {params}={init}
#js >>
    use DragonWars;
    var addr = Address();
    if(addr != null) {
        if(addr.OwnerID == RawUserID) {
            if(DragonWars["NPCS"]) {
                var obj = JSON.parse(Params);
                var list = JSON.parse(DragonWars["NPCS"]);
                var exists = false;
                for(i = 0; i < list.length; i++) {
                    if(list[i].Name == obj.Name) {
                        exists = true;
                    }
                }
                if(exists == false) {
                    list.push(obj);
                    DragonWars["NPCS"] = JSON.stringify(list);
                    resp = "Alright, the NPC " + obj.Name + " was added!";
                } else {
                    resp = "Sorry, the NPC Name already exists.";
                }
            }
        }
    }
>>

[#CONTINUE#]
&?stables {params}={init}
#js >>
    use DragonWars;
    Params = Replace(Params, "<@", "");
    Params = Replace(Params, "!", "");
    Params = Replace(Params, ">", "");
    if(DragonWars[RawUserID]) {
        if(DragonWars["Mode"] == "online") {
            if(DragonWars[Params]) {
                var obj = JSON.parse(DragonWars[Params]);
                if(!obj.Stables) {
                    obj.Stables = new Array();
                }
                var data = "```\n";
                for(i = 0; i < obj.Stables.length; i++) {
                    data = data + obj.Stables[i].Name + " ADHS("+obj.Stables[i].Stats.Attack + "/" + obj.Stables[i].Stats.Defense + "/" + obj.Stables[i].Stats.Health + "/" + obj.Stables[i].Stats.Speed + ")\n";
                }
                resp = data + "```";
            }
        } else {
            resp = DragonWars["ModeMsg"];
        }
    } else {
        resp = "You have to register using `?register` before starting the game.";
    }
>>

[#CONTINUE#]
&m?buy {params}={init}
#js >>
    use DragonWars;
    if(DragonWars["Mode"] == "online") {
        if(DragonWars[RawUserID]) {
            var market = JSON.parse(DragonWars["Market"]);
            var obj = JSON.parse(DragonWars[RawUserID]);

            if(market.Active == true) {
                for(i = 0; i < market.Items.length; i++) {
                    if(Params.toLowerCase() == market.Items[i].Name.toLowerCase()) {
                        if(obj.Tokens >= market.Items[i].Price) {
                            // They have enough tokens.
                            if(Params.toLowerCase() == "lucius gem") {
                                if(obj.Dragon.Stats.Attack >= 10) {
                                    obj.Dragon.Stats.Attack -= 10;
                                    obj.Tokens -= market.Items[i].Price;
                                    DragonWars[RawUserID] = JSON.stringify(obj);
                                    resp = "You have purchased `" + Params + "` **" + obj.Dragon.Name + "** has lost 10 attack stat points.";
                                } else {
                                    resp = "Your dragons attack stats are below 10.";
                                }
                            }
                            if(Params.toLowerCase() == "markidis gem") {
                                if(obj.Dragon.Stats.Defense >= 10) {
                                    obj.Dragon.Stats.Defense -= 10;
                                    obj.Tokens -= market.Items[i].Price;
                                    DragonWars[RawUserID] = JSON.stringify(obj);
                                    resp = "You have purchased `" + Params + "` **" + obj.Dragon.Name + "** has lost 10 defense stat points.";
                                } else {
                                    resp = "Your dragons defense stats are below 10.";
                                }
                            }
                            if(Params.toLowerCase() == "aegon gem") {
                                if(obj.Dragon.Stats.Health >= 10) {
                                    obj.Dragon.Stats.Health -= 10;
                                    obj.Tokens -= market.Items[i].Price;
                                    DragonWars[RawUserID] = JSON.stringify(obj);
                                    resp = "You have purchased `" + Params + "` **" + obj.Dragon.Name + "** has lost 10 health stat points.";
                                } else {
                                    resp = "Your dragons health stats are below 10.";
                                }
                            }
                            if(Params.toLowerCase() == "lua gem") {
                                if(obj.Dragon.Stats.Speed >= 10) {
                                    obj.Dragon.Stats.Speed -= 10;
                                    obj.Tokens -= market.Items[i].Price;
                                    DragonWars[RawUserID] = JSON.stringify(obj);
                                    resp = "You have purchased `" + Params + "` **" + obj.Dragon.Name + "** has lost 10 speed stat points.";
                                } else {
                                    resp = "Your dragons speed stats are below 10.";
                                }
                            }
                            if(Params.toLowerCase() == "power incense") {
                                var exists = false;
                                var nowT = Math.floor(Date.now() / 1000);
                                if(obj.hasOwnProperty("Timers")) {
                                    for(t=0;t<obj.Timers.length;t++) {
                                        if(obj.Timers.hasOwnProperty(t)) {
                                            if(obj.Timers[t]["AttackIncense"]) {
                                                if(obj.Timers[t]["AttackIncense"] > nowT) {
                                                    exists = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                if(exists == false) {
                                    obj.Tokens -= market.Items[i].Price;
                                    var ti = Math.floor(Date.now() / 1000) + 1800;
                                    var timer = {AttackIncense:ti};
                                    obj.Timers.push(timer);
                                    DragonWars[RawUserID] = JSON.stringify(obj);
                                    resp = "You have purchased `" + Params + "`. Over the next 30 minutes your dragon will not gain attack stats.";
                                } else {
                                    resp = "You already have a power incense in progress. You cannot stack incense.";
                                }
                            }
                            if(Params.toLowerCase() == "defense incense") {
                                var exists = false;
                                var nowT = Math.floor(Date.now() / 1000);
                                if(obj.hasOwnProperty("Timers")) {
                                    for(t=0;t<obj.Timers.length;t++) {
                                        if(obj.Timers[t]["DefenseIncense"]) {
                                            if(obj.Timers[t]["DefenseIncense"] > nowT) {
                                                exists = true;
                                            }
                                        }
                                    }
                                }
                                if(exists == false) {
                                    obj.Tokens -= market.Items[i].Price;
                                    var ti = Math.floor(Date.now() / 1000) + 1800;
                                    var timer = {DefenseIncense:ti};
                                    obj.Timers.push(timer);
                                    DragonWars[RawUserID] = JSON.stringify(obj);
                                    resp = "You have purchased `" + Params + "`. Over the next 30 minutes your dragon will not gain defense stats.";
                                } else {
                                    resp = "You already have a defense incense in progress. You cannot stack incense.";
                                }
                            }
                            if(Params.toLowerCase() == "health incense") {
                                var exists = false;
                                var nowT = Math.floor(Date.now() / 1000);
                                if(obj.hasOwnProperty("Timers")) {
                                    for(t=0;t<obj.Timers.length;t++) {
                                        if(obj.Timers[t]["AttackIncense"]) {
                                            if(obj.Timers[t]["HealthIncense"] > nowT) {
                                                exists = true;
                                            }
                                        }
                                    }
                                }
                                if(exists == false) {
                                    obj.Tokens -= market.Items[i].Price;
                                    var ti = Math.floor(Date.now() / 1000) + 1800;
                                    var timer = {HealthIncense:ti};
                                    obj.Timers.push(timer);
                                    DragonWars[RawUserID] = JSON.stringify(obj);
                                    resp = "You have purchased `" + Params + "`. Over the next 30 minutes your dragon will not gain health stats.";
                                } else {
                                    resp = "You already have a health incense in progress. You cannot stack incense.";
                                }
                            }
                            if(Params.toLowerCase() == "speed incense") {
                                var exists = false;
                                var nowT = Math.floor(Date.now() / 1000);
                                if(obj.hasOwnProperty("Timers")) {
                                    for(t=0;t<obj.Timers.length;t++) {
                                        if(obj.Timers[t]["SpeedIncense"]) {
                                            if(obj.Timers[t]["SpeedIncense"] > nowT) {
                                                exists = true;
                                            }
                                        }
                                    }
                                }
                                if(exists == false) {
                                    obj.Tokens -= market.Items[i].Price;
                                    var ti = Math.floor(Date.now() / 1000) + 1800;
                                    var timer = {SpeedIncense:ti};
                                    obj.Timers.push(timer);
                                    DragonWars[RawUserID] = JSON.stringify(obj);
                                    resp = "You have purchased `" + Params + "`. Over the next 30 minutes your dragon will not gain speed stats.";
                                } else {
                                    resp = "You already have a speed incense in progress. You cannot stack incense.";
                                }
                            }
                            if(Params.toLowerCase() == "hunters wings") {
                                var exists = false;
                                var nowT = Math.floor(Date.now() / 1000);
                                if(obj.hasOwnProperty("Timers")) {
                                    for(t=0;t<obj.Timers.length;t++) {
                                        if(obj.Timers[t]["HuntersWings"]) {
                                            if(obj.Timers[t]["HuntersWings"] > nowT) {
                                                exists = true;
                                            }
                                        }
                                    }
                                }
                                if(exists == false) {
                                    obj.Tokens -= market.Items[i].Price;
                                    var ti = Math.floor(Date.now() / 1000) + 1800;
                                    var timer = {HuntersWings:ti};
                                    obj.Timers.push(timer);
                                    DragonWars[RawUserID] = JSON.stringify(obj);
                                    resp = "You have purchased `" + Params + "`. Over the next 30 minutes your hunts longer than `100 seconds` will be cut down by 60 seconds.";
                                } else {
                                    resp = "You already have a hunters wings in progress. You cannot stack hunters wings.";
                                }
                            }

                            if(Params.toLowerCase() == "trainers shoes") {
                                var exists = false;
                                var nowT = Math.floor(Date.now() / 1000);
                                if(obj.hasOwnProperty("Timers")) {
                                    for(t=0;t<obj.Timers.length;t++) {
                                        if(obj.Timers[t]["TrainingShoes"]) {
                                            if(obj.Timers[t]["TrainingShoes"] > nowT) {
                                                exists = true;
                                            }
                                        }
                                    }
                                }
                                if(exists == false) {
                                    obj.Tokens -= market.Items[i].Price;
                                    var ti = Math.floor(Date.now() / 1000) + 1800;
                                    var timer = {TrainingShoes:ti};
                                    obj.Timers.push(timer);
                                    DragonWars[RawUserID] = JSON.stringify(obj);
                                    resp = "You have purchased `" + Params + "`. Over the next 30 minutes your trainings longer than `100 seconds` will be cut down by 60 seconds.";
                                } else {
                                    resp = "You already have a trainers shoes in progress. You cannot stack this item.";
                                }
                            }
                        } else {
                            resp = "You don't have enough tokens for `" + Params + "`";
                        }
                    }
                }
            }
        } else {
            resp = "You have to register using `?register` before starting the game.";
        }
    }
>>

[#CONTINUE#]
h?list={init}
#js >>
    use DragonWars;
    use dwHunts;
    if(DragonWars[RawUserID]) {
        var list = "";
        var hunts = JSON.parse(dwHunts["Data"]);
        for(i=0;i<hunts.length;i++) {
            if(hunts[i].Progress == false) {
                list = list + "h?join " + hunts[i].ID + "\n";
            }
        }
        if(list != "") {
            resp = "```\nAvailable hunts to join!\n-----------------\n" + list + "```";
        } else {
            resp = "There are no hunts to join.. Start one with `h?start`";
        }
    } else {
    	resp = "You have to register using `?register` before starting the game.";
    }
>>

[#CONTINUE#]
huntDone={init}
{arslock}
#js >>
use DragonWars;
use dwHunts;
use dwTimers;
import "https://raw.githubusercontent.com/proxikal/Echo/master/Javascript/dwFunc.js";
if(DragonWars[RawUserID]) {
    var obj = JSON.parse(DragonWars[RawUserID]);
    var now = Math.floor(Date.now() / 1000);
    var hunts = JSON.parse(dwHunts["Data"]);
    var rewards = "";
    obj.Training = false;
    var ownerHasPowerIncense = false;
    var ownerHasDefenseIncense = false;
    var ownerHasHealthIncense = false;
    var ownerHasSpeedIncense = false;
    var rwd = GetHuntStatRewards();
    var oatt = rwd.Attack;
    var odef = rwd.Defense;
    var ohlt = rwd.Health;
    var ospd = rwd.Speed;
    var oexp = rwd.Exp;
    var ocash = rwd.Cash;
    var otokens = rwd.Tokens;


    if(obj.Timers == null) { obj.Timers = new Array(); }
    for(i = 0; i < obj.Timers.length; i++) {
        if(obj.Timers[i]["AttackIncense"]) {
            if(obj.Timers[i]["AttackIncense"] > now) {
                ownerHasPowerIncense = true;
            }
        }
        if(obj.Timers[i]["DefenseIncense"]) {
            if(obj.Timers[i]["DefenseIncense"] > now) {
                ownerHasDefenseIncense = true;
            }
        }
        if(obj.Timers[i]["HealthIncense"]) {
            if(obj.Timers[i]["HealthIncense"] > now) {
                ownerHasHealthIncense = true;
            }
        }
        if(obj.Timers[i]["SpeedIncense"]) {
            if(obj.Timers[i]["SpeedIncense"] > now) {
                ownerHasSpeedIncense = true;
            }
        }
        if(obj.Timers[i]["Hunting"]) {
            if(now >= obj.Timers[i]["Hunting"]) {
                // Generate some training stats the dragon has earned.
                var ownerDragon = "";
                var ratt = 0;
                var rdef = 0;
                var rhlt = 0;

                for(o = 0; o < hunts.length; o++) {
                    if(hunts[o].Owner == RawUserID) {
                        var batt = 0;
                        var bdef = 0;
                        var bhlt = 0;
                        var bspd = 0;
                        var bexp = 0;
                        var btok = 0;
                        var bba = BonusByUsers(hunts[o]);
                        var fbn = HunterFormulaBonus(hunts[o]);
                        batt = bba.Attack;
                        bdef = bba.Defense;
                        bhlt = bba.Health;
                        bspd = bba.Speed;
                        bexp = bba.Exp;
                        batt += fbn.Attack;
                        bdef += fbn.Defense;
                        bhlt += fbn.Health;
                        bspd += fbn.Speed;

                        oatt += Math.floor(batt);
                        odef += Math.floor(bdef);
                        ohlt += Math.floor(bhlt);
                        ospd += Math.floor(bspd);

                        oexp += bexp;
                        for(var e = 0; e < hunts[o].Users.length; e++) {
                            //pmstart = pmstart + hunts[o].Users[e] + ",";
                            var usr = JSON.parse(DragonWars[hunts[o].Users[e]]);
                            if(usr.Dragon == null) {
                                usr.Dragon = GetDragon(hunts[o].Users[e]);
                            }
                            if(usr.Dragon != null) {
                                usr.Hunting = false; 
                                usr.Exp += oexp;
                                usr.Cash += ocash;
                                var userHasPowerIncense = false;
                                var userHasDefenseIncense = false;
                                var userHasHealthIncense = false;
                                var userHasSpeedIncense = false;
                                var urwd = GetHuntStatRewards();
                                var uatt = urwd.Attack;
                                var udef = urwd.Defense;
                                var uhlt = urwd.Health;
                                var uspd = urwd.Speed;
                                uatt += fbn.Attack;
                                udef += fbn.Defense;
                                uhlt += fbn.Health;
                                uspd += fbn.Speed;
                                usr.Tokens += urwd.Tokens;
                                uatt += Math.floor(batt);
                                udef += Math.floor(bdef);
                                uhlt += Math.floor(bhlt);
                                uspd += Math.floor(bspd);
                                
                                var nowT = Math.floor(Date.now() / 1000);
                                if(usr.Timers == null) { usr.Timers = new Array(); }
                                for(t=0;t<usr.Timers.length;t++) {
                                    if(usr.Timers[t]["AttackIncense"]) {
                                        if(usr.Timers[t]["AttackIncense"] > nowT) {
                                            userHasPowerIncense = true;
                                        }
                                    }
                                    if(usr.Timers[t]["DefenseIncense"]) {
                                        if(usr.Timers[t]["DefenseIncense"] > nowT) {
                                            userHasDefenseIncense = true;
                                        }
                                    }
                                    if(usr.Timers[t]["HealthIncense"]) {
                                        if(usr.Timers[t]["HealthIncense"] > nowT) {
                                            userHasHealthIncense = true;
                                        }
                                    }
                                    if(usr.Timers[t]["SpeedIncense"]) {
                                        if(usr.Timers[t]["SpeedIncense"] > nowT) {
                                            userHasSpeedIncense = true;
                                        }
                                    }
                                }
                                if(HasMaxStats(usr.Dragon) == false) {
                                    var Diff = ComputeStatsToLimit(usr.Dragon);
                                    if(uatt + udef + uhlt + uspd > Diff) {
                                        var rnd = Math.floor(Math.random() * 3);
                                        if(rnd == 0) {
                                            uatt = Diff;
                                        } else {
                                            uatt = 0;
                                        }
                                        if(rnd == 1) {
                                            udef = Diff;
                                        } else {
                                            udef = 0;
                                        }
                                        if(rnd == 2) {
                                            uhlt = Diff;
                                        } else {
                                            uhlt = 0;
                                        }
                                        if(rnd == 3) {
                                            uspd = Diff;
                                        } else {
                                            uspd = 0;
                                        }

                                    }
                                    if(userHasPowerIncense == true) {
                                        var rb = Math.floor(Math.random() * 2) + 0;
                                        if(userHasDefenseIncense == false) {
                                            if(rb == 0) {
                                                udef = udef + Math.floor(uatt / 3);
                                            }
                                        }
                                        if(userHasHealthIncense == false) {
                                            if(rb == 1) {
                                                uhlt = uhlt + Math.floor(uatt / 3);
                                            }
                                        }
                                        if(userHasSpeedIncense == false) {
                                            if(rb == 2) {
                                                uspd = uspd + Math.floor(uatt / 3);
                                            }
                                        }
                                        uatt = 0;
                                    }
                                    if(userHasDefenseIncense == true) {
                                        var rb = Math.floor(Math.random() * 2) + 0;
                                        if(userHasPowerIncense == false) {
                                            if(rb == 0) {
                                                uatt = uatt + Math.floor(udef / 3);
                                            }
                                        }
                                        if(userHasHealthIncense == false) {
                                            if(rb == 1) {
                                                uhlt = uhlt + Math.floor(udef / 3);
                                            }
                                        }
                                        if(userHasSpeedIncense == false) {
                                            if(rb == 2) {
                                                uspd = uspd + Math.floor(udef / 3);
                                            }
                                        }
                                        udef = 0;
                                    }
                                    if(userHasHealthIncense == true) {
                                        var rb = Math.floor(Math.random() * 2) + 0;
                                        if(userHasDefenseIncense == false) {
                                            if(rb == 0) {
                                                udef = udef + Math.floor(uhlt / 3);
                                            }
                                        }
                                        if(userHasPowerIncense == false) {
                                            if(rb == 1) {
                                                uatt = uatt + Math.floor(uhlt / 3);
                                            }
                                        }
                                        if(userHasSpeedIncense == false) {
                                            if(rb == 2) {
                                                uspd = uspd + Math.floor(uhlt / 3);
                                            }
                                        }
                                        uhlt = 0;
                                    }
                                    if(userHasSpeedIncense == true) {
                                        var rb = Math.floor(Math.random() * 2) + 0;
                                        if(userHasDefenseIncense == false) {
                                            if(rb == 0) {
                                                udef = udef + Math.floor(uspd / 3);
                                            }
                                        }
                                        if(userHasPowerIncense == false) {
                                            if(rb == 1) {
                                                uatt = uatt + Math.floor(uspd / 3);
                                            }
                                        }
                                        if(userHasHealthIncense == false) {
                                            if(rb == 2) {
                                                uhlt = uhlt + Math.floor(uspd / 3);
                                            }
                                        }
                                        uspd = 0;
                                    }
                                    if(uatt == 0 && udef == 0 && uhlt == 0 && uspd == 0) {
                                        rewards += usr.Dragon.Name + " has Earned (Ŧ"+urwd.Tokens+") and no stats.\n";
                                    } else {
                                        rewards += usr.Dragon.Name + " has Earned (Ŧ"+urwd.Tokens+") ADHS (" + uatt + "/" + udef + "/" + uhlt + "/" + uspd + ")\n";
                                    }
                                } else {
                                    var tokens = Math.floor(Math.random() * 15) + 0;
                                    usr.Tokens += tokens;
                                    rewards += usr.Dragon.Name + " has Earned (Ŧ"+tokens+") and no stats.\n";
                                }
                                if(usr.Dragon == null) {
                                    usr = JSON.parse(DragonWars[hunts[o].Users[e]]);
                                }
                                usr.Dragon.Stats.Defense += udef;
                                usr.Dragon.Stats.Health += uhlt;
                                usr.Dragon.Stats.Attack += uatt;
                                usr.Dragon.Stats.Speed += uspd;
                                usr.Training = false;
                                usr.Timers.splice(i, 1);
                                //--
                                delete dwTimers[hunts[o].Users[e] + "-hunting"];
                                DragonWars[hunts[o].Users[e]] = JSON.stringify(usr);
                            }
                        }
                        hunts.splice(o, 1);
                        dwHunts["Data"] = JSON.stringify(hunts);
                    }
                }
                //pmstart = TrimSuffix(pmstart, ",");
                obj.Hunting = false;
                if(HasMaxStats(obj.Dragon) == false) {
                    var Diff = ComputeStatsToLimit(obj.Dragon);
                    if(oatt + odef + ohlt + ospd > Diff) {
                        var rnd = Math.floor(Math.random() * 3);
                        if(rnd == 0) {
                            oatt = Diff;
                        } else {
                            oatt = 0;
                        }
                        if(rnd == 1) {
                            odef = Diff;
                        } else {
                            odef = 0;
                        }
                        if(rnd == 2) {
                            ohlt = Diff;
                        } else {
                            ohlt = 0;
                        }
                        if(rnd == 3) {
                            ospd = Diff;
                        } else {
                            ospd = 0;
                        }
                    }

                    if(ownerHasPowerIncense == true) {
                        var rb = Math.floor(Math.random() * 2) + 0;
                        if(ownerHasDefenseIncense == false) {
                            if(rb == 0) {
                                odef = odef + Math.floor(oatt / 3);
                            }
                        }
                        if(ownerHasHealthIncense == false) {
                            if(rb == 1) {
                                ohlt = ohlt + Math.floor(oatt / 3);
                            }
                        }
                        if(ownerHasSpeedIncense == false) {
                            if(rb == 2) {
                                ospd = ospd + Math.floor(oatt / 3);
                            }
                        }
                        oatt = 0;
                    }
                    if(ownerHasDefenseIncense == true) {
                        var rb = Math.floor(Math.random() * 2) + 0;
                        if(ownerHasPowerIncense == false) {
                            if(rb == 0) {
                                oatt = oatt + Math.floor(odef / 3);
                            }
                        }
                        if(ownerHasHealthIncense == false) {
                            if(rb == 1) {
                                ohlt = ohlt + Math.floor(odef / 3);
                            }
                        }
                        if(ownerHasSpeedIncense == false) {
                            if(rb == 2) {
                                ospd = ospd + Math.floor(odef / 3);
                            }
                        }
                        odef = 0;
                    }
                    if(ownerHasHealthIncense == true) {
                        var rb = Math.floor(Math.random() * 2) + 0;
                        if(ownerHasDefenseIncense == false) {
                            if(rb == 0) {
                                odef = odef + Math.floor(ohlt / 3);
                            }
                        }
                        if(ownerHasPowerIncense == false) {
                            if(rb == 1) {
                                oatt = oatt + Math.floor(ohlt / 3);
                            }
                        }
                        if(ownerHasSpeedIncense == false) {
                            if(rb == 2) {
                                ospd = ospd + Math.floor(ohlt / 3);
                            }
                        }
                        ohlt = 0;
                    }
                    if(ownerHasSpeedIncense == true) {
                        var rb = Math.floor(Math.random() * 2) + 0;
                        if(ownerHasDefenseIncense == false) {
                            if(rb == 0) {
                                odef = odef + Math.floor(ospd / 3);
                            }
                        }
                        if(ownerHasPowerIncense == false) {
                            if(rb == 1) {
                                oatt = oatt + Math.floor(ospd / 3);
                            }
                        }
                        if(ownerHasHealthIncense == false) {
                            if(rb == 2) {
                                ohlt = ohlt + Math.floor(ospd / 3);
                            }
                        }
                        ospd = 0;
                    }
                    if(oatt == 0 && odef == 0 && ohlt == 0 && ospd == 0) {
                        rewards += obj.Dragon.Name + " has Earned (Ŧ"+otokens+") and no stats.\n";
                    } else {
                        rewards += obj.Dragon.Name + " has Earned (Ŧ"+otokens+") ADHS (" + oatt + "/" + odef + "/" + ohlt + "/" + ospd + ")\n";
                    }
                } else {
                    otokens += Math.floor(Math.random() * 15) + 0;
                    rewards += obj.Dragon.Name + " has Earned (Ŧ"+otokens+") and no stats.\n";
                }
                if(obj.Dragon == null) {
                    obj = JSON.parse(DragonWars[RawUserID]);
                }
                obj.Dragon.Stats.Attack += oatt;
                obj.Dragon.Stats.Health += ohlt;
                obj.Dragon.Stats.Defense += odef;
                obj.Dragon.Stats.Speed += ospd;
                obj.Training = false;
                obj.Cash += ocash;
                obj.Exp += oexp;
                obj.Tokens += otokens;
                obj.Timers.splice(i, 1);
                //--
                delete dwTimers[RawUserID + "-hunting"];
                DragonWars[RawUserID] = JSON.stringify(obj);
                resp = obj.Dragon.Name + " the great is complete! The hunt gained `(" + oexp + ")` exp and **$" + ocash + "**\n```\n" + rewards + "```";
            }
        }
    }
}
>>

[#CONTINUE#]
&?delNPC {params}={init}
#js >>
    use DragonWars;
    var addr = Address();
    if(addr != null) {
        if(addr.OwnerID == RawUserID) {
            if(DragonWars["NPCS"]) {
                var obj = JSON.parse(Params);
                var list = JSON.parse(DragonWars["NPCS"]);
                var exists = false;
                var id = 0;
                for(i = 0; i < list.length; i++) {
                    if(list[i].Name == obj.Name) {
                        exists = true;
                        id = i;
                    }
                }
                if(exists == true) {
                    list.splice(id, 1);
                    DragonWars["NPCS"] = JSON.stringify(list);
                    resp = "Alright, the NPC " + obj.Name + " was removed!";
                } else {
                    resp = "Sorry, the NPC Name doesn't exists.";
                }
            }
        }
    }
>>

[#CONTINUE#]
&?remHunt {params}={init}
#js >>
    use dwHunts;
    if(MemberHasRole("243136044466176001", RawUserID, "Management")) {
        var hunts = JSON.parse(dwHunts["Data"]);
        for(i = 0; i < hunts.length; i++) {
            if(hunts[i].ID == Params) {
                hunts.splice(i, 1);
                dwHunts["Data"] = JSON.stringify(hunts);
                resp = "The hunt has been removed from the system";
            }
        }
    }
>>

[#CONTINUE#]
&p?attack {params}={init}
#js >>
    use DragonWars;
    use dwTimers;
    use dwCastles;
    import "https://raw.githubusercontent.com/proxikal/Echo/master/Javascript/dwFunc.js";
    if(DragonWars["Mode"] == "online") {
        if(DragonWars[RawUserID]) {
            if(!dwTimers[RawUserID + "-train"] && !dwTimers[RawUserID + "-hunting"]) {
                Params = Replace(Params, "<@", "");
                Params = Replace(Params, "!", "");
                Params = Replace(Params, ">", "");
                var num = 0;
                var isID = true;
                var Opponent = "";
                var hasPowerIncense = false;
                var hasDefenseIncense = false;
                var hasHealthIncense = false;
                var hasSpeedIncense = false;

                if(Params.length > 12) {
                    Opponent = Params;
                } else {
                    isID = false;
                    Opponent = GetDragonOwner(Params);
                }

                if(DragonWars[RawUserID]) {
                    if(DragonWars[Opponent]) {
                        var obj = JSON.parse(DragonWars[RawUserID]);
                        var p2;
                        if(isID == false) {
                            p2 = JSON.parse(DragonWars[Opponent]);
                        } else {
                            p2 = GetDragonByName(Params);
                        }
                        var battlelog = "```\n";
                        var castles = JSON.parse(dwCastles["Data"]);
                        var over1 = obj.Dragon.Stats.Attack + obj.Dragon.Stats.Defense + obj.Dragon.Stats.Health + obj.Dragon.Stats.Speed;

                        var now = Math.floor(Date.now() / 1000);
                        var ready = false;
                        var exists = 0;
                        if(obj.Timers != null) {
                            for(i = 0; i < obj.Timers.length; i++) {
                                if(obj.Timers[i]["Attack"]) {
                                    exists++;
                                    if(now >= obj.Timers[i]["Attack"]) {
                                        ready = true;
                                        obj.Timers.splice(i, 1);
                                    }
                                }
                                if(obj.Timers.hasOwnProperty("AttackIncense")) {
                                    if(obj.Timers[i]["AttackIncense"]) {
                                        if(now >= obj.Timers[i]["AttackIncense"]) {
                                            hasPowerIncense = true;
                                        }
                                    }
                                }
                                if(obj.Timers.hasOwnProperty("DefenseIncense")) {
                                    if(obj.Timers[i]["DefenseIncense"]) {
                                        if(now >= obj.Timers[i]["DefenseIncense"]) {
                                            hasDefenseIncense = true;
                                        }
                                    }
                                }
                                if(obj.Timers.hasOwnProperty("HealthIncense")) {
                                    if(obj.Timers[i]["HealthIncense"]) {
                                        if(now >= obj.Timers[i]["HealthIncense"]) {
                                            hasHealthIncense = true;
                                        }
                                    }
                                }
                                if(obj.Timers.hasOwnProperty("SpeedIncense")) {
                                    if(obj.Timers[i]["SpeedIncense"]) {
                                        if(now >= obj.Timers[i]["SpeedIncense"]) {
                                            hasSpeedIncense = true;
                                        }
                                    }
                                }
                            }
                        }

                        if(exists == 0) { ready = true; }

                        if(ready == true) {
                            var att = obj.Dragon.Stats.Attack;
                            var def = obj.Dragon.Stats.Defense;
                            var hlt = obj.Dragon.Stats.Health;
                            var spd = obj.Dragon.Stats.Speed;

                            var adh = Math.floor(def / 2);
                            hlt += adh;
                            if(isID == false) {
                                if(p2.Stables != null) {
                                    for(i = 0; i < p2.Stables.length; i++) {
                                        if(p2.Stables[i].Name == Params) {
                                            p2.Dragon = p2.Stables[i];
                                        }
                                    }
                                }
                            }
                            var over2 = p2.Dragon.Stats.Attack + p2.Dragon.Stats.Defense + p2.Dragon.Stats.Health + p2.Dragon.Stats.Speed;

                            if (over1 <= (over2 + 900)) {
                                var npcAtt = p2.Dragon.Stats.Attack;
                                var npcDef = p2.Dragon.Stats.Defense;
                                var npcHlt = p2.Dragon.Stats.Health;
                                var npcSpd = p2.Dragon.Stats.Speed;

                                var ndh = Math.floor(npcDef / 2);
                                npcHlt += ndh;
                                var randExp = Math.floor(Math.random() * 2500) + 250;
                                var randCash = Math.floor(Math.random() * 5000) + 900;
                                var expBonus = 0;
                                var p1ids = new Array();
                                var p2ids = new Array();
                                p1ids.push(obj.Dragon.ID);
                                p2ids.push(p2.Dragon.ID);

                                if(obj.Stables != null) {
                                    for(u=0;u<obj.Stables.length;u++) {
                                        p1ids.push(obj.Stables[u].ID);
                                    }
                                }
                                if(p2.Stables != null) {
                                    for(u=0;u<p2.Stables.length;u++) {
                                        p2ids.push(p2.Stables[u].ID);
                                    }
                                }

                                for(i=0;i<castles.length;i++) {
                                    for(d1=0;d1<p1ids.length;d1++) {
                                        if(castles[i].OwnedBy == d1.toString()) {
                                            if(castles[i].Boost.Type == "Attack") {
                                                att += castles[i].Boost.Amount;
                                            }
                                            if(castles[i].Boost.Type == "Defense") {
                                                def += castles[i].Boost.Amount;
                                            }
                                            if(castles[i].Boost.Type == "Health") {
                                                hlt += castles[i].Boost.Amount;
                                            }
                                            if(castles[i].Boost.Type == "Speed") {
                                                spd += castles[i].Boost.Amount;
                                            }
                                            if(castles[i].Boost.Type == "Exp") {
                                                expBonus += castles[i].Boost.Amount;
                                            }
                                        }
                                    }
                                    for(d1=0;d1<p2ids.length;d1++) {
                                        if(castles[i].OwnedBy == d1.toString()) {
                                            if(castles[i].Boost.Type == "Attack") {
                                                npcAtt += castles[i].Boost.Amount;
                                            }
                                            if(castles[i].Boost.Type == "Defense") {
                                                npcDef += castles[i].Boost.Amount;
                                            }
                                            if(castles[i].Boost.Type == "Health") {
                                                npcHlt += castles[i].Boost.Amount;
                                            }
                                            if(castles[i].Boost.Type == "Speed") {
                                                npcSpd += castles[i].Boost.Amount;
                                            }

                                        }
                                    }
                                }

                                var PlayerHealth = hlt;
                                var NPCHealth = npcHlt;
                                var winner = "";
                                var p2Name = "";
                                if(isID == true) {
                                    p2Name = p2.Dragon.Name;
                                } else {
                                    p2Name = Params;
                                }

                                // Run the Game:
                                for(i = 1; i < 100; i++) {
                                    if(spd > npcSpd) {
                                        if(NPCHealth > 0 && PlayerHealth > 0) {
                                            var lowHit = Math.floor(att / 2);
                                            var dmg = Math.floor(Math.random() * att) + lowHit;
                                            var critChance = 0.35;
                                            if(Math.random() > critChance) {
                                                if(dmg > att) {
                                                    dmg = att;
                                                }
                                            }
                                            NPCHealth -= dmg;
                                            if(dmg > att) {
                                                battlelog += obj.Dragon.Name + " Critically Hit "+p2Name+" for: " + commafy(dmg) + " damage.\n";
                                            } else {
                                                battlelog += obj.Dragon.Name + " Hit "+p2Name+" for: " + commafy(dmg) + " damage.\n";
                                            }
                                        }
                                        if(PlayerHealth > 0 && NPCHealth > 0) {
                                            var lowHit = Math.floor(npcAtt / 2);
                                            var dmg = Math.floor(Math.random() * npcAtt) + lowHit;
                                            var critChance = 0.35;
                                            if(Math.random() > critChance) {
                                                if(dmg > npcAtt) {
                                                    dmg = npcAtt;
                                                }
                                            }
                                            PlayerHealth -= dmg;
                                            if(dmg > npcAtt) {
                                                battlelog += p2Name + " Critically Hit "+obj.Dragon.Name+" for: " + commafy(dmg) + " damage.\n";
                                            } else {
                                                battlelog += p2Name + " Hit "+obj.Dragon.Name+" for: " + commafy(dmg) + " damage.\n";
                                            }
                                        }
                                    } else {
                                        if(PlayerHealth > 0 && NPCHealth > 0) {
                                            var lowHit = Math.floor(npcAtt / 2);
                                            var dmg = Math.floor(Math.random() * npcAtt) + lowHit;
                                            var critChance = 0.35;
                                            if(Math.random() > critChance) {
                                                if(dmg > npcAtt) {
                                                    dmg = npcAtt;
                                                }
                                            }
                                            PlayerHealth -= dmg;
                                            if(dmg > npcAtt) {
                                                battlelog += p2Name + " Critically Hit "+obj.Dragon.Name+" for: " + commafy(dmg) + " damage.\n";
                                            } else {
                                                battlelog += p2Name + " Hit "+obj.Dragon.Name+" for: " + commafy(dmg) + " damage.\n";
                                            }
                                        }
                                        if(NPCHealth > 0 && PlayerHealth > 0) {
                                            var lowHit = Math.floor(att / 2);
                                            var dmg = Math.floor(Math.random() * att) + lowHit;
                                            var critChance = 0.35;
                                            if(Math.random() > critChance) {
                                                if(dmg > att) {
                                                    dmg = att;
                                                }
                                            }
                                            NPCHealth -= dmg;
                                            if(dmg > att) {
                                                battlelog += obj.Dragon.Name + " Critically Hit "+p2Name+" for: " + commafy(dmg) + " damage.\n";
                                            } else {
                                                battlelog += obj.Dragon.Name + " Hit "+p2Name+" for: " + commafy(dmg) + " damage.\n";
                                            }
                                        }
                                    }

                                    if(PlayerHealth <= 0) {
                                        // The NPC has won..
                                        battlelog += p2Name + " killed " + obj.Dragon.Name + " in (" + i + ") moves.\n";
                                        winner = "NPC";
                                        break;
                                    }

                                    if(PlayerHealth <= 0 && NPCHealth <= 0) {
                                        battlelog += obj.Dragon.Name + " killed " + p2Name + " in (" + i + ") moves.\n";
                                        winner = "Player";
                                        break;
                                    }

                                    if(NPCHealth <= 0) {
                                        battlelog += obj.Dragon.Name + " killed " + p2Name + " in (" + i + ") moves.\n";
                                        // The Player has won..
                                        winner = "Player";
                                        break;
                                    }
                                }

                                if(winner == "Player") {
                                    // Give them cash and experience (And a small percentage to get tokens)
                                    var chanceBoost = 0.25;
                                    var text = "";
                                    var bonus = "";
                                    if(Math.random() < chanceBoost) {
                                        // Give them some stats.
                                        var name = "";
                                        if(HasMaxStats(obj.Dragon) == false) {
                                            if(Math.random() < chanceBoost) {
                                                // Give them some stats.
                                                var name = "";
                                                var rand = Math.floor(Math.random() * 3) + 0;
                                                var boost = Math.floor(Math.random() * 5) + 1;
                                                var maxDif = ComputeStatsToLimit(obj.Dragon);
                                                if(boost >= maxDif) {
                                                    boost = maxDif;
                                                }
                                                if(hasPowerIncense == false) {
                                                    if(rand == 1) { obj.Dragon.Stats.Attack += boost; name = "Attack"; }
                                                    bonus = "*Nice!!* " + obj.Dragon.Name + " has earned **(" + boost + ") " + name + "**";
                                                }
                                                if(hasDefenseIncense == false) {
                                                    if(rand == 2) { obj.Dragon.Stats.Defense += boost; name = "Defense"; }
                                                    bonus = "*Nice!!* " + obj.Dragon.Name + " has earned **(" + boost + ") " + name + "**";
                                                }
                                                if(hasHealthIncense == false) {
                                                    if(rand == 3) { obj.Dragon.Stats.Health += boost; name = "Health"; }
                                                    bonus = "*Nice!!* " + obj.Dragon.Name + " has earned **(" + boost + ") " + name + "**";
                                                }
                                                if(hasSpeedIncense == false) {
                                                    if(rand == 0) { obj.Dragon.Stats.Speed += boost; name = "Speed"; }
                                                    bonus = "*Nice!!* " + obj.Dragon.Name + " has earned **(" + boost + ") " + name + "**";
                                                }
                                            }
                                        }
                                    }
                                    randExp += expBonus;
                                    text = "You have won! You've earned **$" + commafy(randCash) + "** and ("+commafy(randExp)+") experience\n";
                                    //resp = text + bonus + battlelog + "```";
                                    var tokens = Math.floor(Math.random() * 15) + 0;

                                    var emb = {};
                                    emb.title = obj.Dragon.Name + " vs " + p2.Dragon.Name + " Battle log";
                                    emb.description = text + bonus + battlelog + "```";
                                    emb.color = HTML2Int("#00FF00");
                                    var fields = new Array();
                                    var f1 = {
                                        name: "Cash Earned",
                                        value: "$" + commafy(randCash).toString(),
                                        inline: true
                                    };
                                    var f2 = {
                                        name: "Tokens Earned",
                                        value: "Ŧ" + commafy(tokens).toString(),
                                        inline: true
                                    };
                                    var f3 = {
                                        name: "Exp Earned",
                                        value: commafy(randExp).toString(),
                                        inline: true
                                    };
                                    fields.push(f1, f2, f3);
                                    emb.fields = fields;

                                    var d = Math.floor(Date.now() / 1000) + 75;
                                    obj.Cash += randCash;
                                    obj.Exp += randExp;
                                    obj.Tokens += tokens;
                                    var timer = { Attack: d };
                                    obj.Timers.push(timer);
                                    obj.Win += 1;
                                    // --
                                    p2.Loss += 1;
                                    p2.Tokens += tokens;
                                    p2.Cash += randCash;
                                    p2.Exp += randExp;
                                    DragonWars[Opponent] = JSON.stringify(p2);
                                    DragonWars[RawUserID] = JSON.stringify(obj);
                                    resp = emb;
                                } else {
                                    var d = Math.floor(Date.now() / 1000) + 30;
                                    var timer = { Attack: d };
                                    obj.Timers.push(timer);
                                    var exp = Math.floor(randExp / 2);
                                    exp += expBonus;
                                    var cash = Math.floor(randCash / 2);
                                    var tokens = Math.floor(Math.random() * 15) + 1;

                                    var emb = {};
                                    emb.title = obj.Dragon.Name + " vs " + p2.Dragon.Name + " Battle log";
                                    emb.description = battlelog + "```";
                                    emb.color = HTML2Int("#FF0000");
                                    var fields = new Array();
                                    var f1 = {
                                        name: "Cash Earned",
                                        value: "$" + commafy(randCash).toString(),
                                        inline: true
                                    };
                                    var f2 = {
                                        name: "Tokens Earned",
                                        value: "Ŧ" + commafy(tokens).toString(),
                                        inline: true
                                    };
                                    var f3 = {
                                        name: "Exp Earned",
                                        value: commafy(randExp).toString(),
                                        inline: true
                                    };
                                    fields.push(f1, f2, f3);
                                    emb.fields = fields;
                                    resp = emb;

                                    obj.Cash += cash;
                                    obj.Loss += 1;
                                    p2.Win += 1;
                                    p2.Tokens += tokens;
                                    p2.Cash += cash;
                                    p2.Exp += exp;
                                    obj.Exp += exp;
                                    DragonWars[Opponent] = JSON.stringify(p2);
                                    DragonWars[RawUserID] = JSON.stringify(obj);
                                    //resp = "Sorry! You have lost this battle. Better luck next time.\nThe Winner was `("+p2Name+")`\nPlayer Health: `("+PlayerHealth+")` "+p2Name+" Health: `(" + NPCHealth + ")` You have gained: "+exp+" experience and **$"+cash+"**\n" + battlelog + "```";
                                }
                            } else {
                                resp = "The dragon `" + p2.Dragon.Name + "` stats are too low for `" + obj.Dragon.Name + "` to attack. Find a dragon closer to your overall stats.";
                            }
                        } else {
                            var now = Math.floor(Date.now() / 1000);
                            var timeLeft = 0;
                            for(i = 0; i < obj.Timers.length; i++) {
                                if(obj.Timers[i]["Attack"]) {
                                    timeLeft = obj.Timers[i]["Attack"];
                                }
                            }
                            var timeDiff = timeLeft - now; //in ms
                            var seconds = Math.round(timeDiff);
                            resp = "You have to wait `(" + seconds + ")` seconds before attacking another player.";
                        }
                    } else {
                        resp = "The user `"+Opponent+"` you're trying to attack doesn't have a dragon yet.";
                    }
                }
            } else {
                resp = "You can't go off to battle while your dragon is training or hunting.";
            }
        } else {
            resp = "You have to register using `?register` before starting the game.";
        }
    } else {
        resp = DragonWars["ModeMsg"];
    }
>>

[#CONTINUE#]
.listIDS={init}
#js >>
    use DragonWars;
    var cnt = 0;
    var data = "";
    var names = JSON.parse(DragonWars["DragonNames"]);
    for(var usr in DragonWars) {
        if(usr.length > 10 && !Contains(usr, "-")) {
            var obj = JSON.parse(DragonWars[usr]);
            if(obj.Dragon != null) {
                data = data + obj.Dragon.ID + ", ";
                if(obj.Stables != null) {
                    if(obj.Stables.length > 0) {
                        for(i = 0; i < obj.Stables.length; i++) {
                            data = data + obj.Stables[i].ID + ", ";
                        }
                    }
                }
            }
        }
    }
    resp = data;
>>

[#CONTINUE#]
?buyDragon={init}
#js >>
    use DragonWars;
    if(DragonWars["Mode"] == "online") {
        if(DragonWars[RawUserID]) {
            var DragonNames = ["Fredkin", "Jarek", "Nomek", "Argus", "Jehtik", "Ashland", "Corus", "Faelah", "Horus", "Aapep"];
            var names = JSON.parse(DragonWars["DragonNames"]);
            var obj = JSON.parse(DragonWars[RawUserID]);
            if(!obj.Stables) {
                obj.Stables = new Array();
            }
            var maxLength = DragonNames.length;
            var rand = Math.floor(Math.random() * maxLength);
            var randNum = Math.floor(Math.random() * 999) + 111;
            if(obj.Tokens >= 100) {
                var oi = parseInt(DragonWars["LastDragonID"]);
                var NewID = oi + 1;
		    	var rndType = ["fire", "grass", "rock", "steel", "water", "dark", "light"];
		    	var m = Math.floor(Math.random() * rndType.length);
		        var Stats = { Attack: 5, Defense: 5, Health: 5, Speed: 5, Type: rndType[m], Moves: []};
                var newDragon = { ID: NewID, Name: DragonNames[rand] + randNum, Stats: Stats };
                obj.Stables.push(newDragon);
                names.push(DragonNames[rand] + randNum);
                obj.Tokens -= 100;
                DragonWars["LastDragonID"] = NewID.toString();
                DragonWars["DragonNames"] = JSON.stringify(names);
                DragonWars[RawUserID] = JSON.stringify(obj);
                resp = "You have purchased The Dragon `" + DragonNames[rand] + randNum + "` for **100 tokens.**";
            } else {
                resp = "Sorry, you don't have 100 tokens to buy a dragon. Exchange your cash for Tokens using `?exchange Amount`";
            }
        } else {
        	resp = "You have to register using `?register` before starting the game.";
        }
    } else {
        resp = DragonWars["ModeMsg"];
    }
>>

[#CONTINUE#]
?cooldowns={init}
#js >>
    use DragonWars;
    use dwCastles;

    if(DragonWars["Mode"] == "online") {
        if(DragonWars[RawUserID]) {
            var obj = JSON.parse(DragonWars[RawUserID]);
            var castles = JSON.parse(dwCastles["Data"]);
            var att = obj.Dragon.Stats.Attack;
            var def = obj.Dragon.Stats.Defense;
            var hlt = obj.Dragon.Stats.Health;
            var now = Math.floor(Date.now() / 1000);
            var data = "```md\n";

            for(i = 0; i < obj.Timers.length; i++) {

                if(obj.Timers[i]["AttackIncense"]) {
                    var timeLeft = obj.Timers[i]["AttackIncense"];
                    var timeDiff = timeLeft - now; //in ms
                    var seconds = Math.round(timeDiff);
                    var minutes = 0;
                    if(seconds >= 60) {
                        minutes = Math.floor(seconds / 60);
                    }
                    if(now < timeLeft) {
                        if(minutes == 0) {
                            data = data + "# Power Incense:\n- < " + seconds + " seconds left. >\n";
                        }
                        if(minutes > 0) {
                            data = data + "# Power Incense:\n- < " + minutes + " minutes left. >\n";
                        }
                    }
                }

                if(obj.Timers[i]["DefenseIncense"]) {
                    var timeLeft = obj.Timers[i]["DefenseIncense"];
                    var timeDiff = timeLeft - now; //in ms
                    var seconds = Math.round(timeDiff);
                    var minutes = 0;
                    if(seconds >= 60) {
                        minutes = Math.floor(seconds / 60);
                    }
                    if(now < timeLeft) {
                        if(minutes == 0) {
                            data = data + "# Defene Incense:\n- < " + seconds + " seconds left. >\n";
                        }
                        if(minutes > 0) {
                            data = data + "# Defense Incense:\n- < " + minutes + " minutes left. >\n";
                        }
                    }
                }

                if(obj.Timers[i]["HealthIncense"]) {
                    var timeLeft = obj.Timers[i]["HealthIncense"];
                    var timeDiff = timeLeft - now; //in ms
                    var seconds = Math.round(timeDiff);
                    var minutes = 0;
                    if(seconds >= 60) {
                        minutes = Math.floor(seconds / 60);
                    }
                    if(now < timeLeft) {
                        if(minutes == 0) {
                            data = data + "# Health Incense:\n- < " + seconds + " seconds left. >\n";
                        }
                        if(minutes > 0) {
                            data = data + "# Health Incense:\n- < " + minutes + " minutes left. >\n";
                        }
                    }
                }

                if(obj.Timers[i]["SpeedIncense"]) {
                    var timeLeft = obj.Timers[i]["SpeedIncense"];
                    var timeDiff = timeLeft - now; //in ms
                    var seconds = Math.round(timeDiff);
                    var minutes = 0;
                    if(seconds >= 60) {
                        minutes = Math.floor(seconds / 60);
                    }
                    if(now < timeLeft) {
                        if(minutes == 0) {
                            data = data + "# Speed Incense:\n- < " + seconds + " seconds left. >\n";
                        }
                        if(minutes > 0) {
                            data = data + "# Speed Incense:\n- < " + minutes + " minutes left. >\n";
                        }
                    }
                }

                if(obj.Timers[i]["HuntersWings"]) {
                    var timeLeft = obj.Timers[i]["HuntersWings"];
                    var timeDiff = timeLeft - now; //in ms
                    var seconds = Math.round(timeDiff);
                    var minutes = 0;
                    if(seconds >= 60) {
                        minutes = Math.floor(seconds / 60);
                    }
                    if(now < timeLeft) {
                        if(minutes == 0) {
                            data = data + "# Hunters Wings:\n- < " + seconds + " seconds left. >\n";
                        }
                        if(minutes > 0) {
                            data = data + "# Hunters Wings:\n- < " + minutes + " minutes left. >\n";
                        }
                    }
                }

                if(obj.Timers[i]["TrainingShoes"]) {
                    var timeLeft = obj.Timers[i]["TrainingShoes"];
                    var timeDiff = timeLeft - now; //in ms
                    var seconds = Math.round(timeDiff);
                    var minutes = 0;
                    if(seconds >= 60) {
                        minutes = Math.floor(seconds / 60);
                    }
                    if(now < timeLeft) {
                        if(minutes == 0) {
                            data = data + "# Training Shoes:\n- < " + seconds + " seconds left. >\n";
                        }
                        if(minutes > 0) {
                            data = data + "# Training Shoes:\n- < " + minutes + " minutes left. >\n";
                        }
                    }
                }

                if(obj.Timers[i]["Training"]) {
                    var timeLeft = obj.Timers[i]["Training"];
                    var timeDiff = timeLeft - now; //in ms
                    var seconds = Math.round(timeDiff);
                    var minutes = 0;
                    if(now < timeLeft) {
                        if(seconds >= 60) {
                            minutes = Math.floor(seconds / 60);
                            data = data + "# Training:\n- < " + minutes + " minutes left. >\n";
                        } else {
                            data = data + "# Training:\n- < " + seconds + " seconds left. >\n";
                        }
                    }
                }

                if(obj.Timers[i]["Hunting"]) {
                    var timeLeft = obj.Timers[i]["Hunting"];
                    var timeDiff = timeLeft - now; //in ms
                    var seconds = Math.round(timeDiff);
                    var minutes = 0;
                    if(now < timeLeft) {
                        if(seconds >= 60) {
                            minutes = Math.floor(seconds / 60);
                            data = data + "# Hunting:\n- < " + minutes + " minutes left. >\n";
                        } else {
                            data = data + "# Hunting:\n- < " + seconds + " seconds left. >\n";
                        }
                    }
                }

                if(obj.Timers[i]["Attack"]) {
                    var timeLeft = obj.Timers[i]["Attack"];
                    var timeDiff = timeLeft - now; //in ms
                    var seconds = Math.round(timeDiff);
                    var minutes = 0;
                    if(now < timeLeft) {
                        if(seconds >= 60) {
                            minutes = Math.floor(seconds / 60);
                            data = data + "# PVP:\n- < " + minutes + " minutes left. >\n";
                        } else {
                            data = data + "# PVP:\n- < " + seconds + " seconds left. >\n";
                        }
                    }
                }

                if(obj.Timers[i]["NPC"]) {
                    var timeLeft = obj.Timers[i]["NPC"];
                    var timeDiff = timeLeft - now; //in ms
                    var seconds = Math.round(timeDiff);
                    var minutes = 0;
                    if(now < timeLeft) {
                        if(seconds >= 60) {
                            minutes = Math.floor(seconds / 60);
                            data = data + "# NPC:\n- < " + minutes + " minutes left. >\n";
                        } else {
                            data = data + "# NPC:\n- < " + seconds + " seconds left. >\n";
                        }
                    }
                }
                if(obj.Timers[i]["Castle"]) {
                    var timeLeft = obj.Timers[i]["Castle"];
                    var timeDiff = timeLeft - now; //in ms
                    var minutes = 0;
                    var seconds = Math.round(timeDiff);
                    if(now < timeLeft) {
                        if(seconds >= 60) {
                            minutes = Math.floor(seconds / 60);
                            data = data + "# Castles:\n- < " + minutes + " minutes left. >\n";
                        } else {
                            data = data + "# Castles:\n- < " + seconds + " seconds left. >\n";
                        }
                    }
                }
            }
            if(data != "```") {
                resp = data + "```";
            } else {
                resp = "You have no cooldowns at this time..";
            }
        } else {
            resp = "You need to register to the game in order to play! Type: `?register`";
        }
    } else {
        resp = DragonWars["ModeMsg"];
    }
>>

[#CONTINUE#]
m?list={init}
#js >>
    use DragonWars;
    if(DragonWars[RawUserID]) {
	    var market = JSON.parse(DragonWars["Market"]);
	    var data = "";
	    data += "```md\n";
	    data += "Everything in the market costs tokens not cash!\n";
	    data += "type ?help to learn how to exchange.\n";
	    data += "The item takes effect as soon as purchased.\n";
	    data += "Ŧ = Token\n";
	    data += "----------\n";
	    for(i = 0; i < market.Items.length; i++) {
	        data += "Item: " + market.Items[i].Name + "(Costs: Ŧ"+market.Items[i].Price+")\n- " + market.Items[i].Description + "\n\n";
	    }
	    data += "```";
	    resp = data;
    } else {
    	resp = "You have to register using `?register` before starting the game.";
    }
>>

[#CONTINUE#]
&c?attack {params}={init}
#js >>
    use DragonWars;
    use dwCastles;
    use dwTimers;
    import "https://raw.githubusercontent.com/proxikal/Echo/master/Javascript/dwFunc.js";
    if(DragonWars["Mode"] == "online") {
        if(DragonWars[RawUserID]) {
            if(!dwTimers[RawUserID + "-train"] && !dwTimers[RawUserID + "-hunting"]) { 
                if(DragonWars[RawUserID]) {
                    var obj = JSON.parse(DragonWars[RawUserID]);
                    var castles = JSON.parse(dwCastles["Data"]);
                    var battlelog = "```\n";

                    var now = Math.floor(Date.now() / 1000);
                    var ready = false;
                    var exists = 0;
                    if(obj.Timers != null) {
                        for(i = 0; i < obj.Timers.length; i++) {
                            if(obj.Timers[i]["Castle"]) {
                                exists++;
                                if(now >= obj.Timers[i]["Castle"]) {
                                    ready = true;
                                    obj.Timers.splice(i, 1);
                                }
                            }
                        }
                    }
                    var castleExists = false;
                    for(i = 0; i < castles.length; i++) {
                        if(castles[i].Name.toLowerCase() == Params.toLowerCase()) {
                            castleExists = true;
                        }
                    }

                    if(exists == 0) { ready = true; }

                    if(castleExists == true) {
                        if(ready == true) {
                            var att = obj.Dragon.Stats.Attack;
                            var def = obj.Dragon.Stats.Defense;
                            var hlt = obj.Dragon.Stats.Health;
                            var spd = obj.Dragon.Stats.Speed;
                            var adh = Math.floor(def / 2);
                            hlt += adh;
                            var npcAtt = 0;
                            var npcDef = 0;
                            var npcHlt = 0;
                            var npcSpd = 0;
                            var randExp = 0;
                            var randCash = 0;
                            var ownedByUser = false;
                            var lastDefeat = 0;
                            var pass = true;
                            var ownerDragon = "Castle";
                            var expBonus = 0;
                            var ownedCastles = 0;
                            var userDragons = new Array();
                            var dragID = obj.Dragon.ID;

                            userDragons.push(dragID);
                            if(obj.Stables != null) {
                                for(i = 0; i < obj.Stables.length; i++) {
                                    if(obj.Stables[i].hasOwnProperty("ID")) {
                                        userDragons.push(obj.Stables[i].ID);
                                    }
                                }
                            }

                            for(c = 0; c < castles.length; c++) {
                                for(o = 0; o < userDragons.length; o++) {
                                    var tick = 0;
                                    if(userDragons[o] == dragID) {
                                        tick += 1;
                                        if(castles[c].OwnedBy == userDragons[o].toString()) {
                                            ownedCastles += 1;
                                            if(castles[c].Boost.Type == "Attack") {
                                                att = att + castles[c].Boost.Amount;
                                            }
                                            if(castles[c].Boost.Type == "Defense") {
                                                def = def + castles[c].Boost.Amount;
                                            }
                                            if(castles[c].Boost.Type == "Health") {
                                                hlt = hlt + castles[c].Boost.Amount;
                                            }
                                            if(castles[c].Boost.Type == "Speed") {
                                                spd = spd + castles[c].Boost.Amount;
                                            }
                                            if(castles[c].Boost.Type == "Exp") {
                                                expBonus += castles[c].Boost.Amount;
                                            }
                                        }
                                    }
                                }
                                if(tick == 0) {
                                    if(castles[c].OwnedBy != "NPC") {
                                        var drag = GetDragonByID(castles[c].OwnedBy);
                                        if(drag.hasOwnProperty("Dragon")) {
                                            if(castles[c].OwnedBy == drag.Dragon.ID.toString()) {
                                                tick += 1;
                                                if(castles[c].Boost.Type == "Attack") {
                                                    npcAtt = npcAtt + castles[c].Boost.Amount;
                                                }
                                                if(castles[c].Boost.Type == "Defense") {
                                                    npcDef = npcDef + castles[c].Boost.Amount;
                                                }
                                                if(castles[c].Boost.Type == "Health") {
                                                    npcHlt = npcHlt + castles[c].Boost.Amount;
                                                }
                                                if(castles[c].Boost.Type == "Speed") {
                                                    npcSpd = npcSpd + castles[c].Boost.Amount;
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            if(ownedCastles < 3) {
                                for(i = 0; i < castles.length; i++) {
                                    if(castles[i].Name == Params) {
                                        if(castles[i].OwnedBy == "NPC") {
                                            // Use the stats provided in "IFNPC"
                                            npcAtt = castles[i].IFNPC.Attack;
                                            npcDef = castles[i].IFNPC.Defense;
                                            npcHlt = castles[i].IFNPC.Health;
                                            npcSpd = castles[i].IFNPC.Speed;
                                            LastDefeat = castles[i].LastDefeat;
                                        } else {
                                            // It's owned by a player, load their dragon Stats.
                                            ownedByUser = true;
                                            //var usr = JSON.parse(DragonWars[castles[i].OwnedBy]);
                                            var usr = GetDragonByID(castles[i].OwnedBy);
                                            npcAtt = usr.Dragon.Stats.Attack;
                                            npcDef = usr.Dragon.Stats.Defense;
                                            npcHlt = usr.Dragon.Stats.Health;
                                            npcSpd = usr.Dragon.Stats.Speed;
                                            LastDefeat = castles[i].LastDefeat;
                                            ownerDragon = usr.Dragon.Name;
                                        }
                                    }
                                }

                                if(lastDefeat > 0) {
                                    if(now < lastDefeat) {
                                        pass = false;
                                    }
                                }

                                if(ownerDragon != obj.Dragon.Name) {
                                    if(pass == true) {
                                        var PlayerHealth = hlt;
                                        var NPCHealth = npcHlt;
                                        var ndh = Math.floor(npcDef / 2);
                                        NPCHealth += ndh;
                                        var winner = "";

                                        // Run the Game:
                                        for(i = 1; i < 100; i++) {
                                            //Check the user speed vs the npc
                                            if(spd > npcSpd) {
                                                if(NPCHealth > 0 && PlayerHealth > 0) {
                                                    var lowHit = Math.floor(att / 2);
                                                    var dmg = Math.floor(Math.random() * att) + lowHit;
                                                    NPCHealth -= dmg;
                                                    if(dmg > att) {
                                                        battlelog += obj.Dragon.Name+" Critically Hit " + ownerDragon + " for: " + commafy(dmg) + " damage.\n";
                                                    } else {
                                                        battlelog += obj.Dragon.Name+" Hit " + ownerDragon + " for: " + commafy(dmg) + " damage.\n";
                                                    }
                                                }
                                                if(PlayerHealth > 0 && NPCHealth > 0) {
                                                    var lowHit = Math.floor(npcAtt / 2);
                                                    var dmg = Math.floor(Math.random() * npcAtt) + lowHit;
                                                    PlayerHealth -= dmg;
                                                    if(dmg > npcAtt) {
                                                        battlelog += ownerDragon + " Critically Hit "+obj.Dragon.Name+" for: " + commafy(dmg) + " damage.\n";
                                                    } else {
                                                        battlelog += ownerDragon + " Hit "+obj.Dragon.Name+" for: " + commafy(dmg) + " damage.\n";
                                                    }
                                                }
                                            } else {
                                                if(PlayerHealth > 0 && NPCHealth > 0) {
                                                    var lowHit = Math.floor(npcAtt / 2);
                                                    var dmg = Math.floor(Math.random() * npcAtt) + lowHit;
                                                    PlayerHealth -= dmg;
                                                    if(dmg > npcAtt) {
                                                        battlelog += ownerDragon + " Critically Hit "+obj.Dragon.Name+" for: " + commafy(dmg) + " damage.\n";
                                                    } else {
                                                        battlelog += ownerDragon + " Hit "+obj.Dragon.Name+" for: " + commafy(dmg) + " damage.\n";
                                                    }
                                                }
                                                if(NPCHealth > 0 && PlayerHealth > 0) {
                                                    var lowHit = Math.floor(att / 2);
                                                    var dmg = Math.floor(Math.random() * att) + lowHit;
                                                    NPCHealth -= dmg;
                                                    if(dmg > att) {
                                                        battlelog += obj.Dragon.Name+" Critically Hit " + ownerDragon + " for: " + commafy(dmg) + " damage.\n";
                                                    } else {
                                                        battlelog += obj.Dragon.Name+" Hit " + ownerDragon + " for: " + commafy(dmg) + " damage.\n";
                                                    }
                                                }
                                            }

                                            if(PlayerHealth <= 0) {
                                                // The NPC has won..
                                                battlelog += ownerDragon + " killed " + obj.Dragon.Name + " in (" + i + ") moves.\n";
                                                winner = "Castle";
                                                break;
                                            }

                                            if(PlayerHealth <= 0 && NPCHealth <= 0) {
                                                battlelog += obj.Dragon.Name + " killed " + ownerDragon + " in (" + i + ") moves.\n";
                                                winner = "Player";
                                                break;
                                            }

                                            if(NPCHealth <= 0) {
                                                battlelog += obj.Dragon.Name + " killed " + ownerDragon + " in (" + i + ") moves.\n";
                                                // The Player has won..
                                                winner = "Player";
                                                break;
                                            }
                                        }

                                        if(winner == "Player") {
                                            // Give them cash and experience (And a small percentage to get tokens)
                                            var chanceBoost = 0.02;
                                            var text = "";
                                            var bonus = "";
                                            var lastOwner = "";

                                            for(c = 0; c < castles.length; c++) {
                                                if(castles[c].Name == Params) {
                                                    lastOwner = castles[c].OwnedBy;
                                                    castles[c].OwnedBy = dragID.toString();
                                                    castles[c].LastDefeat = Math.floor(Date.now() / 1000) + 600;
                                                }
                                            }
                                            dwCastles["Data"] = JSON.stringify(castles);

                                            if(Math.random() < chanceBoost) {
                                                // Give them some stats.
                                                var name = "";
                                                if(HasMaxStats(obj.Dragon) == false) {
                                                    if(Math.random() < chanceBoost) {
                                                        // Give them some stats.
                                                        var name = "";
                                                        var rand = Math.floor(Math.random() * 3) + 0;
                                                        var boost = Math.floor(Math.random() * 5) + 1;
                                                        var maxDif = ComputeStatsToLimit(obj.Dragon);
                                                        if(boost >= maxDif) {
                                                            boost = maxDif;
                                                        }
                                                        if(rand == 0) { obj.Dragon.Stats.Speed += boost; name = "Speed"; }
                                                        if(rand == 1) { obj.Dragon.Stats.Attack += boost; name = "Attack"; }
                                                        if(rand == 2) { obj.Dragon.Stats.Defense += boost; name = "Defense"; }
                                                        if(rand == 3) { obj.Dragon.Stats.Health += boost; name = "Health"; }
                                                        bonus = "*Nice!!* " + obj.Dragon.Name + " has earned **(" + boost + ") " + name + "**";
                                                    }
                                                }
                                            }
                                            var tokens = Math.floor(Math.random() * 15) + 1;
                                            randCash = Math.floor(Math.random() * 8000) + 500;
                                            randExp = Math.floor(Math.random() * 5000) + 950;
                                            randExp += expBonus;

                                            text = "You have beaten `" + ownerDragon + "`! And now control this castle. You're dragon will have a stat boost as long as you hold the castle down.\n";
                                            text = text + bonus + battlelog + "```";
                                            var fields = new Array();
                                            var emb = {};
                                            emb.title = Params + "'s Castle Battle Results.";
                                            emb.description = text;
                                            var f1 = {
                                                Name: "Exp Gained",
                                                Value: commafy(randExp).toString(),
                                                Inline: true
                                            };
                                            var f2 = {
                                                Name: "Cash Gained",
                                                Value: "$" + commafy(randCash).toString(),
                                                Inline: true
                                            };
                                            var f3 = {
                                                Name: "Tokens Gained",
                                                Value: "Ŧ" + commafy(tokens).toString(),
                                                Inline: true
                                            };
                                            fields.push(f1, f2, f3);
                                            emb.fields = fields;
                                            emb.color = HTML2Int("#00FF00");
                                            var d = Math.floor(Date.now() / 1000) + 60;
                                            obj.Cash += randCash;
                                            obj.Exp += randExp;
                                            obj.Takeovers += 1;
                                            var timer = { Castle: d };
                                            obj.Timers.push(timer);
                                            resp = emb;
                                            DragonWars[RawUserID] = JSON.stringify(obj);
                                        } else {
                                            var d = Math.floor(Date.now() / 1000) + 60;
                                            var timer = { Castle: d };
                                            var tokens = Math.floor(Math.random() * 10) + 0;
                                            obj.Timers.push(timer);
                                            randCash = Math.floor(Math.random() * 8000) + 500;
                                            randExp = Math.floor(Math.random() * 5000) + 950;
                                            randExp += expBonus;
                                            var exp = Math.floor(randExp / 2);
                                            var cash = Math.floor(randCash / 2);
                                            obj.Cash += cash;
                                            obj.Exp += exp;
                                            DragonWars[RawUserID] = JSON.stringify(obj);
                                            var emb = {};
                                            emb.title = Params + "'s Castle Battle Results.";
                                            emb.description = battlelog + "```";
                                            var fields = new Array();
                                            var f1 = {
                                                Name: "Castle Health",
                                                Value: commafy(npcHlt).toString(),
                                                Inline: true
                                            };
                                            var f2 = {
                                                Name: "Castle Attack",
                                                Value: commafy(npcAtt).toString(),
                                                Inline: true
                                            };
                                            var f3 = {
                                                Name: "Castle Owner",
                                                Value: ownerDragon,
                                                Inline: true
                                            };
                                            var f4 = {
                                                Name: "Exp Gained",
                                                Value: commafy(exp).toString(),
                                                Inline: true
                                            };
                                            var f5 = {
                                                Name: "Cash Gained",
                                                Value: "$" + commafy(cash).toString(),
                                                Inline: true
                                            };
                                            var f6 = {
                                                Name: "Tokens Gained",
                                                Value: "Ŧ" + commafy(tokens).toString(),
                                                Inline: true
                                            };

                                            fields.push(f1, f2, f3, f4, f5, f6);
                                            emb.fields = fields;
                                            emb.color = HTML2Int("#FF0000");
                                            /*
                                            resp = "Sorry! You have lost this battle. Better luck next time.\nNPC Attack: "+npcAtt+" - The Winner was `("+ownerDragon+")` - Player Health: `("+PlayerHealth+")`\nCastle Health: `(" + NPCHealth + ")`\n You have gained: `("+exp+")` and `$"+cash+"`\n" + battlelog + "```";
                                            */
                                            resp = emb;
                                        }
                                    } else {
                                        resp = "This castle has been taken over recently, you must have some time before attacking.";
                                    }
                                } else {
                                    resp = "You can't attack your own Castle..";
                                }
                            } else {
                                resp = "Sorry, You can only capture 3 castles at a time. You currently own `"+ownedCastles+"` If you want to leave a castle type `c?cancel Castle Name`.";
                            }
                        } else {
                            var now = Math.floor(Date.now() / 1000);
                            var timeLeft = 0;
                            for(i = 0; i < obj.Timers.length; i++) {
                                if(obj.Timers[i]["Castle"]) {
                                    timeLeft = obj.Timers[i]["Castle"];
                                }
                            }
                            var timeDiff = timeLeft - now; //in ms
                            var seconds = Math.round(timeDiff);
                            resp = "You have to wait `(" + seconds + ")` seconds before attacking.";
                        }
                    } else {
                        resp = "The castle doesn't exist. Type `c?list pagenumber` for a list";
                    }
                }
            } else {
                resp = "You can't go off to battle while your dragon is training or hunting.";
            }
        } else {
            resp = "You have to register using `?register` before starting the game.";
        }
    } else {
        resp = DragonWars["ModeMsg"];
    }
>>
[#CONTINUE#]
&m?add {params}={init}
#js >>
    use DragonWars;
    var addr = Address("dragonwars");
    if(addr.OwnerID == RawUserID) {
        var market = JSON.parse(DragonWars["Market"]);
        var item = JSON.parse(Params);
        if(item.Name != null) {
            var exists = false;
            for(i = 0; i < market.Items.length; i++) {
                if(market.Items[i].Name == item.Name) {
                    exists = true;
                }
            }
            if(exists == false) {
                market.Items.push(item);
                resp = "You have added the item to the market";
                DragonWars["Market"] = JSON.stringify(market);
            }
        } else {
            resp = "The query is not a market itme object.";
        }
    } else {
        resp = "You're not the owner of this address.";
    }
>>

[#CONTINUE#]
?help={init}
```md
Max Dragon Stats: {r?DragonWars:statLimit}
------------------------
?rename <name>
- Renames your active dragon for $15,000 Cash.

?train
- Trains your active dragon.

n?attack <NpcNameHere>
- Fights an NPC Player.

n?list <pagenumber>
- Lists the available npcs by page.

c?list <pagenumber>
- Lists the available castles by page.

c?attack <CastleName>
- Attacks a castle.

m?list
- List off some items you can buy for your dragon.

m?buy
- Buy an item from the market list.

?stats
- Read your active dragons stats.

p?stats <DragonName>
- Read a specific dragons stats.

?stop
- Forces dragon to stop training.

p?attack <UserID/DragonName>
- Attacks another Player by Their ID or Dragon Name.

h?help
- Learn how to join/start hunts and gain good rewards!

c?cancel <CastleName>
- Your dragon will leave the castle.

?stables <UserID>
- Shows the users stabled dragons and their stats.

?mystables
- Shows a list of your stabled dragons.

?switch <Dragon>
- Switches your active dragon.

?exchange <Exp/Cash> <Amount>
- Exchange cash or exp for Tokens (10k = 1 token)

?buyDragon
- Purchases a dragon for 100 tokens and than stables him.

?leaderboard -<att/def/health/spd/win/loss>
- Shows the top dragons from a category.

?cooldowns
- Shows all your active cooldowns.

Staff Commands:
-----------------
?modhelp
```

[#CONTINUE#]
&p?stats {params}={init}
#js >>
    use DragonWars;
    use dwCastles;
    import "https://raw.githubusercontent.com/proxikal/Echo/master/Javascript/dwFunc.js";
    if(DragonWars["Mode"] == "online") {
        var isID = true;

        if(Params.length > 12) {
            Opponent = Params;
        } else {
            isID = false;
            Opponent = GetDragonOwner(Params);
        }
        if(DragonWars[Opponent]) {
            var usr = {};
            var obj = {};

            if(isID == false) {
                usr = JSON.parse(DragonWars[Opponent]);
            } else {
                usr = GetDragonByName(Params);
            }
            if(isID == false) {
                if(usr.Dragon.Name == Params) {
                    obj = usr;
                } else {
                    obj = usr;
                    for(t = 0; t < usr.Stables.length; t++) {
                        if(usr.Stables[t].Name == Params) {
                            obj.Dragon = usr.Stables[t];
                        }
                    }
                }
            }

            var castles = JSON.parse(dwCastles["Data"]);
            var att = obj.Dragon.Stats.Attack;
            var def = obj.Dragon.Stats.Defense;
            var hlt = obj.Dragon.Stats.Health;
            var spd = obj.Dragon.Stats.Speed;
            var batt = 0;
            var bdef = 0;
            var bhlt = 0;
            var bexp = 0;
            var bspd = 0;
            var castleList = "";
            var tick = 0;

            for(i = 0; i < castles.length; i++) {
                var dragonsid = obj.Dragon.ID.toString();
                if(castles[i].OwnedBy == dragonsid) {
                    if(tick == 0) {
                        castleList += "*Castles that you own:*\n--------\n";
                    }
                    tick += 1;
                    castleList += "**" + castles[i].Name + "** *(+" + castles[i].Boost.Amount + " " + castles[i].Boost.Type + ")*\n";
                    if(castles[i].Boost.Type == "Attack") {
                        batt += castles[i].Boost.Amount;
                    }
                    if(castles[i].Boost.Type == "Health") {
                        bhlt += castles[i].Boost.Amount;
                    }
                    if(castles[i].Boost.Type == "Defense") {
                        bdef += castles[i].Boost.Amount;
                    }
                    if(castles[i].Boost.Type == "Speed") {
                        bspd += castles[i].Boost.Amount;
                    }
                    if(castles[i].Boost.Type == "Exp") {
                        bexp += castles[i].Boost.Amount;
                    }
                    if(i == castles.length) {
                        castleList += "--------\n";
                    }
                }
            }

            var dat = "";
            var saveFile = false;
            var color = "#fff";
            var thumb = "";
            if(obj.Dragon.Stats.Type == "fire") { color = "#9C2A00"; thumb = "https://proxikal.github.io/Echo/Intralink/DragonWars/FireDragon.png"; }
            if(obj.Dragon.Stats.Type == "grass") { color = "#00FF00"; thumb = "https://proxikal.github.io/Echo/Intralink/DragonWars/GrassDragon.png"; }
            if(obj.Dragon.Stats.Type == "water") { color = "#0077be"; thumb = "https://proxikal.github.io/Echo/Intralink/DragonWars/WaterDragon.png"; }
            if(obj.Dragon.Stats.Type == "rock") { color = "#f4a460"; thumb = "https://proxikal.github.io/Echo/Intralink/DragonWars/RockDragon.png"; }
            if(obj.Dragon.Stats.Type == "steel") { color = "#b0c4de"; thumb = "https://proxikal.github.io/Echo/Intralink/DragonWars/SteelDragon.png"; }
            if(obj.Dragon.Stats.Type == "dark") { color = "#a9a9a9"; thumb = "https://proxikal.github.io/Echo/Intralink/DragonWars/DarkDragon.png"; }
            if(obj.Dragon.Stats.Type == "light") { color = "#C3C3C3"; thumb = "https://proxikal.github.io/Echo/Intralink/DragonWars/LightDragon.png"; }

            var now = Math.floor(Date.now() / 1000);
            var ovr = (att + def + hlt + spd);
            var overall = ovr.toString();
            var emb = {};
            emb.title = obj.Dragon.Name + " Information.";
            emb.color = HTML2Int(color);
            emb.description = castleList;
            var thumbnail = {
                url: thumb
            };
            if(thumbnail != null) {
                emb.thumbnail = thumbnail;
            }
            var fields = new Array();
            var wins = "0";
            var loss = "0";
            var npcwins = "0";
            var npcloss = "0";
            var takeovers = "0";
            if(obj.Win != null) {
                wins = obj.Win.toString();
            }
            if(obj.Loss != null) {
                loss = obj.Loss.toString();
            }
            if(obj.NPCWins != null) {
                npcwins = obj.NPCWins.toString();
            }
            if(obj.NPCLoss != null) {
                npcloss = obj.NPCLoss.toString();
            }
            if(obj.Takeovers != null) {
                takeovers = obj.Takeovers.toString();
            }

            var f1 = {
                name: "Attack",
                value: "(" + commafy(att) + "+" + commafy(batt) + ")",
                inline: true
            };
            var f2 = {
                name: "Defense",
                value: "(" + commafy(def) + "+" + commafy(bdef) + ")",
                inline: true
            };
            var f3 = {
                name: "Health",
                value: "(" + commafy(hlt) + "+" + commafy(bhlt) + ")",
                inline: true
            };
            var f4 = {
                name: "Speed",
                value: "(" + commafy(spd) + "+"+commafy(bspd)+")",
                inline: true
            };
            var f5 = {
                name: "Exp",
                value: "(" + commafy(obj.Exp) + "+"+commafy(bexp)+")",
                inline: true
            };
            var f6 = {
                name: "Cash",
                value: "($"+commafy(obj.Cash)+")",
                inline: true
            };
            var f7 = {
                name: "Tokens",
                value: "("+commafy(obj.Tokens)+")",
                inline: true
            };
            var f8 = {
                name: "PVP Wins",
                value: commafy(wins).toString(),
                inline: true
            };
            var f9 = {
                name: "PVP Losses",
                value: commafy(loss).toString(),
                inline: true
            };
            var f10 = {
                name: "NPC Wins",
                value: commafy(npcwins).toString(),
                inline: true
            };
            var f11 = {
                name: "NPC Losses",
                value: commafy(npcloss).toString(),
                inline: true
            };
            var f12 = {
                name: "Castle Wins",
                value: commafy(takeovers).toString(),
                inline: true
            };


            fields.push(f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12);
            emb.fields = fields;
            var footer = {
                text: "Dragon Type: ("+obj.Dragon.Stats.Type.toUpperCase()+") -- Overall Stats: " + commafy(overall) + " / " + commafy(DragonWars["statLimit"])
            };
            emb.footer = footer;
            resp = emb;
        } else {
            resp = "The player or dragon doesn't exist in the game. Check your spelling!";
        }
    } else {
        resp = DragonWars["ModeMsg"];
    }
>>

[#CONTINUE#]
?regNPCS={init}
#js >>
    use DragonWars;
    DragonWars["NPCS"] = "[]";
    resp = "Done!";
>>

[#CONTINUE#]
x?npc={init}
When adding an npc you need to copy the object and place it as the params in the command.
example:
```
?addNPC {
    "Name": "Rock Star Fountains",
    "Attack": 285,
    "Defense": 198,
    "Health": 350,
    "Exp": [500, 3150],
    "Cash": [900, 3250]
}
```

[#CONTINUE#]
&?givecash {params}={init}
#js >>
    use DragonWars;
    import "https://raw.githubusercontent.com/proxikal/Echo/master/Javascript/dwFunc.js";
    if(IsAddressStaff(RawUserID) == true) {
        if(DragonWars[UserID]) {
            var obj = JSON.parse(DragonWars[UserID]);
            var cash = 0;
            cash = parseInt(Params);
            obj.Cash += cash;
            DragonWars[UserID] = JSON.stringify(obj);
            resp = "You have given the user `" + parseInt(Params) + "` Cash.";
        }
    }
>>

[#CONTINUE#]
&h?disband {params}={init}
#js >>
    use DragonWars;
    use dwHunts;
    import "https://raw.githubusercontent.com/proxikal/Echo/master/Javascript/dwFunc.js";
    if(IsAddressStaff(RawUserID) == true) {
        var hunts = JSON.parse(dwHunts["Data"]);
        var exists = false;
        var idle = false;
        var h = 0;
        for(i=0;i<hunts.length;i++) {
            if(hunts[i].ID == Params) {
                if(hunts[i].Progress == false) {
                    h = i;
                    exists = true;
                    idle = true;
                } else {
                    idle = false;
                }
            }
        }
        if(idle == false) {
            resp = "You can't disband a hunt that's in progress.";
        }
        if(exists == true) {
            hunts.splice(h, 1);
            dwHunts["Data"] = JSON.stringify(hunts);
            resp = "The hunt has been disbanded.";
        }
        if(exists == false) {
            resp = "The hunt `" + Params + "` doesn't exist. Check your spelling!";
        }
    }
>>

[#CONTINUE#]
?mystables={init}
#js >>
    use DragonWars;
    if(DragonWars["Mode"] == "online") {
        if(DragonWars[RawUserID]) {
            var obj = JSON.parse(DragonWars[RawUserID]);
            if(!obj.Stables) {
                obj.Stables = new Array();
            }
            if(obj.Stables.length > 0) {
                var data = "```\n";
                for(i = 0; i < obj.Stables.length; i++) {
                    data = data + obj.Stables[i].Name + " ADHS("+obj.Stables[i].Stats.Attack + "/" + obj.Stables[i].Stats.Defense + "/" + obj.Stables[i].Stats.Health + "/" + obj.Stables[i].Stats.Speed + ") - ("+obj.Stables[i].Stats.Type+")\n";
                }
                resp = data + "```";
            } else {
                resp = "You don't have any dragons in your stables.";
            }
        } else {
            resp = "You have to register using `?register` before starting the game.";
        }
    } else {
        resp = DragonWars["ModeMsg"];
    }
>>

[#CONTINUE#]
huntMaxComplete={init}
{arslock}
#js >>
    use dwTimers;
    if(dwTimers[RawUserID + "-hunting"]) {
        resp = "{sleep:" + dwTimers[RawUserID + "-hunting"] + "}{ars:huntMaxDone}";
    }
>>

[#CONTINUE#]
huntMaxDone={init}
{arslock}
#js >>
use DragonWars;
use dwHunts;
use dwTimers;
import "https://raw.githubusercontent.com/proxikal/Echo/master/Javascript/dwFunc.js";
if(DragonWars[RawUserID]) {
    var now = Math.floor(Date.now() / 1000);
    var ownerID = "";
    var hunts = JSON.parse(dwHunts["Data"]);
    for(var hu = 0; hu < hunts.length; hu++) {
        if(hunts[hu].ID == parseInt(Params)) {
            ownerID = hunts[hu].Owner;
        }
    }
    var obj = JSON.parse(DragonWars[ownerID]);
    var rewards = "";
    obj.Training = false;
    var ownerHasPowerIncense = false;
    var ownerHasDefenseIncense = false;
    var ownerHasHealthIncense = false;
    var ownerHasSpeedIncense = false;
    var rwd = GetHuntStatRewards();
    var oatt = rwd.Attack;
    var odef = rwd.Defense;
    var ohlt = rwd.Health;
    var ospd = rwd.Speed;
    var oexp = rwd.Exp;
    var ocash = rwd.Cash;
    var otokens = rwd.Tokens;


    if(obj.Timers == null) { obj.Timers = new Array(); }
    for(i = 0; i < obj.Timers.length; i++) {
        if(obj.Timers[i]["AttackIncense"]) {
            if(obj.Timers[i]["AttackIncense"] > now) {
                ownerHasPowerIncense = true;
            }
        }
        if(obj.Timers[i]["DefenseIncense"]) {
            if(obj.Timers[i]["DefenseIncense"] > now) {
                ownerHasDefenseIncense = true;
            }
        }
        if(obj.Timers[i]["HealthIncense"]) {
            if(obj.Timers[i]["HealthIncense"] > now) {
                ownerHasHealthIncense = true;
            }
        }
        if(obj.Timers[i]["SpeedIncense"]) {
            if(obj.Timers[i]["SpeedIncense"] > now) {
                ownerHasSpeedIncense = true;
            }
        }
        if(obj.Timers[i]["Hunting"]) {
            if(now >= obj.Timers[i]["Hunting"]) {
                // Generate some training stats the dragon has earned.
                var ownerDragon = "";
                var ratt = 0;
                var rdef = 0;
                var rhlt = 0;

                for(o = 0; o < hunts.length; o++) {
                    if(hunts[o].Owner == ownerID) {
                        var batt = 0;
                        var bdef = 0;
                        var bhlt = 0;
                        var bspd = 0;
                        var bexp = 0;
                        var btok = 0;
                        var bba = BonusByUsers(hunts[o]);
                        var fbn = HunterFormulaBonus(hunts[o]);
                        batt = bba.Attack;
                        bdef = bba.Defense;
                        bhlt = bba.Health;
                        bspd = bba.Speed;
                        bexp = bba.Exp;
                        batt += fbn.Attack;
                        bdef += fbn.Defense;
                        bhlt += fbn.Health;
                        bspd += fbn.Speed;

                        oatt += Math.floor(batt);
                        odef += Math.floor(bdef);
                        ohlt += Math.floor(bhlt);
                        ospd += Math.floor(bspd);

                        oexp += bexp;
                        for(var e = 0; e < hunts[o].Users.length; e++) {
                            //pmstart = pmstart + hunts[o].Users[e] + ",";
                            var usr = JSON.parse(DragonWars[hunts[o].Users[e]]);
                            if(usr.Dragon == null) {
                                usr.Dragon = GetDragon(hunts[o].Users[e]);
                            }
                            if(usr.Dragon != null) {
                                usr.Hunting = false; 
                                usr.Exp += oexp;
                                usr.Cash += ocash;
                                var userHasPowerIncense = false;
                                var userHasDefenseIncense = false;
                                var userHasHealthIncense = false;
                                var userHasSpeedIncense = false;
                                var urwd = GetHuntStatRewards();
                                var uatt = urwd.Attack;
                                var udef = urwd.Defense;
                                var uhlt = urwd.Health;
                                var uspd = urwd.Speed;
                                uatt += fbn.Attack;
                                udef += fbn.Defense;
                                uhlt += fbn.Health;
                                uspd += fbn.Speed;
                                usr.Tokens += urwd.Tokens;
                                uatt += Math.floor(batt);
                                udef += Math.floor(bdef);
                                uhlt += Math.floor(bhlt);
                                uspd += Math.floor(bspd);
                                
                                var nowT = Math.floor(Date.now() / 1000);
                                if(usr.Timers == null) { usr.Timers = new Array(); }
                                for(t=0;t<usr.Timers.length;t++) {
                                    if(usr.Timers[t]["AttackIncense"]) {
                                        if(usr.Timers[t]["AttackIncense"] > nowT) {
                                            userHasPowerIncense = true;
                                        }
                                    }
                                    if(usr.Timers[t]["DefenseIncense"]) {
                                        if(usr.Timers[t]["DefenseIncense"] > nowT) {
                                            userHasDefenseIncense = true;
                                        }
                                    }
                                    if(usr.Timers[t]["HealthIncense"]) {
                                        if(usr.Timers[t]["HealthIncense"] > nowT) {
                                            userHasHealthIncense = true;
                                        }
                                    }
                                    if(usr.Timers[t]["SpeedIncense"]) {
                                        if(usr.Timers[t]["SpeedIncense"] > nowT) {
                                            userHasSpeedIncense = true;
                                        }
                                    }
                                }
                                if(HasMaxStats(usr.Dragon) == false) {
                                    var Diff = ComputeStatsToLimit(usr.Dragon);
                                    if(uatt + udef + uhlt + uspd > Diff) {
                                        var rnd = Math.floor(Math.random() * 3);
                                        if(rnd == 0) {
                                            uatt = Diff;
                                        } else {
                                            uatt = 0;
                                        }
                                        if(rnd == 1) {
                                            udef = Diff;
                                        } else {
                                            udef = 0;
                                        }
                                        if(rnd == 2) {
                                            uhlt = Diff;
                                        } else {
                                            uhlt = 0;
                                        }
                                        if(rnd == 3) {
                                            uspd = Diff;
                                        } else {
                                            uspd = 0;
                                        }

                                    }
                                    if(userHasPowerIncense == true) {
                                        var rb = Math.floor(Math.random() * 2) + 0;
                                        if(userHasDefenseIncense == false) {
                                            if(rb == 0) {
                                                udef = def + Math.floor(uatt / 3);
                                            }
                                        }
                                        if(userHasHealthIncense == false) {
                                            if(rb == 1) {
                                                uhlt = uhlt + Math.floor(uatt / 3);
                                            }
                                        }
                                        if(userHasSpeedIncense == false) {
                                            if(rb == 2) {
                                                uspd = uspd + Math.floor(uatt / 3);
                                            }
                                        }
                                        uatt = 0;
                                    }
                                    if(userHasDefenseIncense == true) {
                                        var rb = Math.floor(Math.random() * 2) + 0;
                                        if(userHasPowerIncense == false) {
                                            if(rb == 0) {
                                                uatt = uatt + Math.floor(udef / 3);
                                            }
                                        }
                                        if(userHasHealthIncense == false) {
                                            if(rb == 1) {
                                                uhlt = uhlt + Math.floor(udef / 3);
                                            }
                                        }
                                        if(userHasSpeedIncense == false) {
                                            if(rb == 2) {
                                                uspd = uspd + Math.floor(udef / 3);
                                            }
                                        }
                                        udef = 0;
                                    }
                                    if(userHasHealthIncense == true) {
                                        var rb = Math.floor(Math.random() * 2) + 0;
                                        if(userHasDefenseIncense == false) {
                                            if(rb == 0) {
                                                udef = udef + Math.floor(uhlt / 3);
                                            }
                                        }
                                        if(userHasPowerIncense == false) {
                                            if(rb == 1) {
                                                uatt = uatt + Math.floor(uhlt / 3);
                                            }
                                        }
                                        if(userHasSpeedIncense == false) {
                                            if(rb == 2) {
                                                uspd = uspd + Math.floor(uhlt / 3);
                                            }
                                        }
                                        uhlt = 0;
                                    }
                                    if(userHasSpeedIncense == true) {
                                        var rb = Math.floor(Math.random() * 2) + 0;
                                        if(userHasDefenseIncense == false) {
                                            if(rb == 0) {
                                                udef = udef + Math.floor(uspd / 3);
                                            }
                                        }
                                        if(userHasPowerIncense == false) {
                                            if(rb == 1) {
                                                uatt = uatt + Math.floor(uspd / 3);
                                            }
                                        }
                                        if(userHasHealthIncense == false) {
                                            if(rb == 2) {
                                                uhlt = uhlt + Math.floor(uspd / 3);
                                            }
                                        }
                                        uspd = 0;
                                    }
                                    if(uatt == 0 && udef == 0 && uhlt == 0 && uspd == 0) {
                                        rewards += usr.Dragon.Name + " has Earned (Ŧ"+urwd.Tokens+") and no stats.\n";
                                    } else {
                                        rewards += usr.Dragon.Name + " has Earned (Ŧ"+urwd.Tokens+") ADHS (" + uatt + "/" + udef + "/" + uhlt + "/" + uspd + ")\n";
                                    }
                                } else {
                                    var tokens = Math.floor(Math.random() * 15) + 0;
                                    usr.Tokens += tokens;
                                    rewards += usr.Dragon.Name + " has Earned (Ŧ"+tokens+") and no stats.\n";
                                }
                                if(usr.Dragon == null) {
                                    usr = JSON.parse(DragonWars[hunts[o].Users[e]]);
                                }
                                usr.Dragon.Stats.Defense += udef;
                                usr.Dragon.Stats.Health += uhlt;
                                usr.Dragon.Stats.Attack += uatt;
                                usr.Dragon.Stats.Speed += uspd;
                                usr.Training = false;
                                usr.Timers.splice(i, 1);
                                //--
                                delete dwTimers[hunts[o].Users[e] + "-hunting"];
                                DragonWars[hunts[o].Users[e]] = JSON.stringify(usr);
                            }
                        }
                        hunts.splice(o, 1);
                        dwHunts["Data"] = JSON.stringify(hunts);
                    }
                }
                //pmstart = TrimSuffix(pmstart, ",");
                obj.Hunting = false;
                if(HasMaxStats(obj.Dragon) == false) {
                    var Diff = ComputeStatsToLimit(obj.Dragon);
                    if(oatt + odef + ohlt + ospd > Diff) {
                        var rnd = Math.floor(Math.random() * 3);
                        if(rnd == 0) {
                            oatt = Diff;
                        } else {
                            oatt = 0;
                        }
                        if(rnd == 1) {
                            odef = Diff;
                        } else {
                            odef = 0;
                        }
                        if(rnd == 2) {
                            ohlt = Diff;
                        } else {
                            ohlt = 0;
                        }
                        if(rnd == 3) {
                            ospd = Diff;
                        } else {
                            ospd = 0;
                        }
                    }

                    if(ownerHasPowerIncense == true) {
                        var rb = Math.floor(Math.random() * 2) + 0;
                        if(ownerHasDefenseIncense == false) {
                            if(rb == 0) {
                                odef = odef + Math.floor(oatt / 3);
                            }
                        }
                        if(ownerHasHealthIncense == false) {
                            if(rb == 1) {
                                ohlt = ohlt + Math.floor(oatt / 3);
                            }
                        }
                        if(ownerHasSpeedIncense == false) {
                            if(rb == 2) {
                                ospd = ospd + Math.floor(oatt / 3);
                            }
                        }
                        oatt = 0;
                    }
                    if(ownerHasDefenseIncense == true) {
                        var rb = Math.floor(Math.random() * 2) + 0;
                        if(ownerHasPowerIncense == false) {
                            if(rb == 0) {
                                oatt = oatt + Math.floor(odef / 3);
                            }
                        }
                        if(ownerHasHealthIncense == false) {
                            if(rb == 1) {
                                ohlt = ohlt + Math.floor(odef / 3);
                            }
                        }
                        if(ownerHasSpeedIncense == false) {
                            if(rb == 2) {
                                ospd = ospd + Math.floor(odef / 3);
                            }
                        }
                        odef = 0;
                    }
                    if(ownerHasHealthIncense == true) {
                        var rb = Math.floor(Math.random() * 2) + 0;
                        if(ownerHasDefenseIncense == false) {
                            if(rb == 0) {
                                odef = odef + Math.floor(ohlt / 3);
                            }
                        }
                        if(ownerHasPowerIncense == false) {
                            if(rb == 1) {
                                oatt = oatt + Math.floor(ohlt / 3);
                            }
                        }
                        if(ownerHasSpeedIncense == false) {
                            if(rb == 2) {
                                ospd = ospd + Math.floor(ohlt / 3);
                            }
                        }
                        ohlt = 0;
                    }
                    if(ownerHasSpeedIncense == true) {
                        var rb = Math.floor(Math.random() * 2) + 0;
                        if(ownerHasDefenseIncense == false) {
                            if(rb == 0) {
                                odef = odef + Math.floor(ospd / 3);
                            }
                        }
                        if(ownerHasPowerIncense == false) {
                            if(rb == 1) {
                                oatt = oatt + Math.floor(ospd / 3);
                            }
                        }
                        if(ownerHasHealthIncense == false) {
                            if(rb == 2) {
                                ohlt = ohlt + Math.floor(ospd / 3);
                            }
                        }
                        ospd = 0;
                    }
                    if(oatt == 0 && odef == 0 && ohlt == 0 && ospd == 0) {
                        rewards += obj.Dragon.Name + " has Earned (Ŧ"+otokens+") and no stats.\n";
                    } else {
                        rewards += obj.Dragon.Name + " has Earned (Ŧ"+otokens+") ADHS (" + oatt + "/" + odef + "/" + ohlt + "/" + ospd + ")\n";
                    }
                } else {
                    otokens += Math.floor(Math.random() * 15) + 0;
                    rewards += obj.Dragon.Name + " has Earned (Ŧ"+otokens+") and no stats.\n";
                }
                if(obj.Dragon == null) {
                    obj = JSON.parse(DragonWars[ownerID]);
                }
                obj.Dragon.Stats.Attack += oatt;
                obj.Dragon.Stats.Health += ohlt;
                obj.Dragon.Stats.Defense += odef;
                obj.Dragon.Stats.Speed += ospd;
                obj.Training = false;
                obj.Cash += ocash;
                obj.Exp += oexp;
                obj.Tokens += otokens;
                obj.Timers.splice(i, 1);
                //--
                delete dwTimers[ownerID + "-hunting"];
                DragonWars[ownerID] = JSON.stringify(obj);
                resp = obj.Dragon.Name + " the great is complete! The hunt gained `(" + oexp + ")` exp and **$" + ocash + "**\n```\n" + rewards + "```";
            }
        }
    }
}
>>

[#CONTINUE#]
&?giveTokens {params}={init}
#js >>
    use DragonWars;
    var addr = Address("dragonwars");
    var obj = JSON.parse(DragonWars[RawUserID]);
    if(addr.OwnerID == RawUserID) {
        var e = parseInt(Params);
        var a = typeof e;
        if(a == "number") {
            var amount = e;
            obj.Tokens += amount;
            DragonWars[RawUserID] = JSON.stringify(obj);
            resp = "Tokens have been granted";
        } else {
            resp = "Params is not a number. It's a `" + a + "`";
        }
    } else {
        resp = "You're not the owner of this address";
    }
>>

[#CONTINUE#]
?checkStaff={init}
#js >>
    use DragonWars;
    var addr = Address("dragonwars");
    if(addr != null) {
        var data = "```\n";
        for(i = 0; i < addr.Staff.length; i++) {
            data += addr.Staff[i] + "\n";
        }
        resp = data + "```";
    }
>>

[#CONTINUE#]
?initiate={init}
#js >>
    use DragonWars;
    if(DragonWars["Mode"] == "offline") {
        if(MemberHasRole("243136044466176001", RawUserID, "Management")) {
            DragonWars["Mode"] = "online";
            DragonWars["ModeMsg"] = "";
            resp = "The system is back online";
        }
    } else {
        resp = "The system is already online. Type: `?shutdown message`";    
    }
>>

[#CONTINUE#]
&?regCastle {params}={init}
#js >>
    use DragonWars;
    if(MemberHasRole("243136044466176001", RawUserID, "Management")) {
        if(DragonWars["Castles"]) {
            var exists = false;
            var castles = JSON.parse(DragonWars["Castles"]);
            var obj = JSON.parse(Params);
            for(i = 0; i < castles.length; i++) {
                if(castles[i].Name == obj.Name) {
                    exists = true;
                }
            }

            if(exists == false) {
                resp = "You have added the castle: " + obj.Name + " to the list.";
                castles.push(obj);
                DragonWars["Castles"] = JSON.stringify(castles);
            } else {
                resp = "The castle name already exists.";
            }
        }
    }
>>

[#CONTINUE#]
&?statLimit {params}={init}
#js >>
    use DragonWars;
    var addr = Address();
    if(addr.OwnerID == RawUserID) {
        DragonWars["statLimit"] = Params;
        resp = "The stat limit has been set to **" + Params + "**";
    } else {
        resp = "You're not the owner of this address.";
    }
>>

[#CONTINUE#]
.listNames={init}
#js >>
    use DragonWars;
    var cnt = 0;
    var data = "";
    var names = JSON.parse(DragonWars["DragonNames"]);
    for(var usr in DragonWars) {
        if(usr.length > 10 && !Contains(usr, "-")) {
            var obj = JSON.parse(DragonWars[usr]);
            if(obj.Dragon != null) {
                data = data + obj.Dragon.Name + ", ";
                if(obj.Stables != null) {
                    if(obj.Stables.length > 0) {
                        for(i = 0; i < obj.Stables.length; i++) {
                            data = data + obj.Stables[i].Name + ", ";
                        }
                    }
                }
            }
        }
    }
    resp = data;
>>

[#CONTINUE#]
h?quit={init}
#js >>
	use DragonWars;
    use dwHunts;
    use dwTimers;
	if(DragonWars[RawUserID]) {
		var obj = JSON.parse(DragonWars[RawUserID]);
		var hunts = JSON.parse(dwHunts["Data"]);
		var exists = 0;
		var huntid = 0;
		var valid = 0;
		if(!dwTimers[RawUserID + "-hunting"]) {
			for(i = 0; i < hunts.length; i++) {
				if(hunts[i].Owner == RawUserID) {
					exists++;
					valid++;
					huntid = i;
					obj.Hunting = false;
					delete dwTimers[RawUserID + "-hunting"];
					for(t = 0; t < obj.Timers.length; t++) {
						if(obj.Timers[t]["Hunting"]) {
							obj.Timers.splice(t, 1);
						}
					}
					for(u = 0; u < hunts[i].Users.length; u++) {
						var usr = JSON.parse(DragonWars[hunts[i].Users[u]]);
						usr.Hunting = false;
						delete dwTimers[hunts[i].Users[u] + "-hunting"];
						for(t = 0; t < usr.Timers.length; t++) {
							if(usr.Timers[t]["Hunting"]) {
								usr.Timers.splice(t, 1);
							}
						}
						DragonWars[hunts[i].Users[u]] = JSON.stringify(usr);
					}
					hunts.splice(huntid, 1);
					dwHunts["Data"] = JSON.stringify(hunts);
					DragonWars[RawUserID] = JSON.stringify(obj);
					resp = "The hunt has been canceled!";
				}
			}

			if(exists == 0) {
				for(i = 0; i < hunts.length; i++) {
					for(u = 0; u < hunts[i].Users.length; u++) {
						if(hunts[i].Users[u] == RawUserID) {
							var usr = JSON.parse(DragonWars[hunts[i].Users[u]]);
							usr.Hunting = false;
							delete DragonWars[hunts[i].Users[u] + "-hunting"];
							for(t = 0; t < usr.Timers.length; t++) {
								if(usr.Timers[t]["Hunting"]) {
									usr.Timers.splice(t, 1);
								}
							}
							valid++;
							DragonWars[hunts[i].Users[u]] = JSON.stringify(usr);
							resp = "You have left the great hunt...";
						}
					}
				}
			}
			if(valid == 0) {
				resp = "You're not a member of any hunt. Type `h?start` to begin a hunt!";
			}
		} else {
			resp = "Your hunt has already started..You can't quit now. type `?stats` to figure out how long you have.";
		}
	} else {
		resp = "You have to register using `?register` before starting the game.";
	}
>>

[#CONTINUE#]
&?switch {params}={init}
#js >>
	use DragonWars;
    use dwTimers;
	if(DragonWars["Mode"] == "online") {
		if(DragonWars[RawUserID]) {
			if(!dwTimers[RawUserID + "-train"] && !dwTimers[RawUserID + "-hunting"]) {
				var obj = JSON.parse(DragonWars[RawUserID]);
				if(!obj.Stables) {
					obj.Stables = new Array();
				}
				var exists = false;
				var Dragon = {};
				var id = 0;

				for(i = 0; i < obj.Stables.length; i++) {
					if(obj.Stables[i].Name == Params) {
						exists = true;
						Dragon = obj.Stables[i];
						id = i;
					}
				}
				if(exists == false) {
					resp = "The dragon doesn't exist in your stables.";
				} else {
					var oldDragon = obj.Dragon;
					obj.Dragon = Dragon;
					obj.Stables.splice(id, 1);
					obj.Stables.push(oldDragon);
					DragonWars[RawUserID] = JSON.stringify(obj);
					resp = "You have switched your active dragon to `" + Dragon.Name + "`";
				}
			} else {
				resp = "You can't stable a dragon while it's training or hunting. If you don't want to wait type `?stop` or `h?quit`";
			}
		} else {
			resp = "You have to register using `?register` before starting the game.";
		}
	} else {
		resp = DragonWars["ModeMsg"];
	}
>>

[#CONTINUE#]
&c?list {params}={init}
#js >>
	use DragonWars;
    use dwCastles;

	import "https://raw.githubusercontent.com/proxikal/Echo/master/Javascript/dwFunc.js";
	if(DragonWars["Mode"] == "online") {
		if(DragonWars[RawUserID]) {
			var data = "```md\n";
			var castles = JSON.parse(dwCastles["Data"]);
			var page = 1;
			var perPage = 5;
			var totalPages = Math.ceil(castles.length / perPage);

			if(Params != "c?list") {
				page = parseInt(Params);
			} else {
				page = 1;
			}

			if(page > totalPages) {
				page = totalPages;
			}

			var cdat = Pagination(page, totalPages, perPage, castles);

			var castleName = "";
			var castleBoss = "";
			var boostType = "";
			var boostAmount = "";
			var oldCastleName = "";

			data = data + "Pages Information:\n----------\nTotal Pages: " + totalPages + "\nViewing: " + cdat.Info + "\n\n";
			for(var i = cdat.Start; i < cdat.End; i++) {
				if(castles[i].Name != oldCastleName) {
					castleName = "";
					castleBoss = "";
					boostType = "";
					boostamount = "";
					data = data + i + " > ";
					castleName = castles[i].Name;
					castleBoss = castles[i].OwnedBy;
					boostType = castles[i].Boost.Type;
					boostAmount = castles[i].Boost.Amount;
					var att = 0;
					var batt = 0;
					var bdef = 0;
					var def = 0;
					var bhlt = 0;
					var hlt = 0;
					var spd = 0;
					var bspd = 0;

					if(castleBoss != "NPC") {
						var usr = GetDragonByID(castles[i].OwnedBy);
						var dragonID = usr.Dragon.ID.toString();
						castleBoss = usr.Dragon.Name;
						att = usr.Dragon.Stats.Attack;
						def = usr.Dragon.Stats.Defense;
						hlt = usr.Dragon.Stats.Health;
						spd = usr.Dragon.Stats.Speed;
						for(var e = 0; e < castles.length; e++) {
							var castleOwner = castles[e].OwnedBy;
							if(castles[e].OwnedBy == dragonID) {
								if(castles[e].Boost.Type == "Attack") {
									batt += castles[e].Boost.Amount;
								}
								if(castles[e].Boost.Type == "Defense") {
									bdef += castles[e].Boost.Amount;
								}
								if(castles[e].Boost.Type == "Health") {
									bhlt += castles[e].Boost.Amount;
								}
								if(castles[e].Boost.Type == "Speed") {
									bspd += castles[e].Boost.Amount;
								}
							}
						}
					} else {
						att = castles[i].IFNPC.Attack;
						def = castles[i].IFNPC.Defense;
						hlt = castles[i].IFNPC.Health;
						spd = castles[i].IFNPC.Speed;
					}
					data = data + castleName + "\n- Owned By: " + castleBoss + "\nADHS(" + att + "+"+batt+"/" + def + "+"+bdef+"/" + hlt + "+"+bhlt + "/" + spd + "+"+bspd+") ";
					data = data + "(+" + boostAmount + " " + boostType + ")\n";
					data = data + "----------------------\n\n";
					oldCastleName = castles[i].Name;
				}
			}

			if(data.length > 7) {
				resp = data + "```\n";
			} else {
				resp = data;
			}
		} else {
			resp = "You have to register using `?register` before starting the game.";
		}
	} else {
		resp = DragonWars["ModeMsg"];
	}
>>

[#CONTINUE#]
?registerCastles={init}
#js >>
	use dwCastles;
		var castleList = new Array();
		// 21 total
		// 7 = Health
		// 7 = Defense
		// 7 = Attack
		// 0 = Speed

		var c1 = {
			Name: "Dragonspire Castle",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Attack", "Amount": 30},
			"IFNPC": {"Attack": 115, "Defense": 50, "Health": 250, "Speed": 50}
		};

		var a1 = {
			Name: "Nomads Fort",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Health", "Amount": 30},
			"IFNPC": {"Attack": 125, "Defense": 68, "Health": 275, "Speed": 50}
		};

		var b1 = {
			Name: "Ashwell Fortress",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Defense", "Amount": 30},
			"IFNPC": {"Attack": 140, "Defense": 75, "Health": 275, "Speed": 65}
		};

		var d1 = {
			Name: "Masham Palace",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Attack", "Amount": 50},
			"IFNPC": {"Attack": 150, "Defense": 115, "Health": 325, "Speed": 75}
		};

		var e1 = {
			Name: "Palace of Horace",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Defense", "Amount": 50},
			"IFNPC": {"Attack": 170, "Defense": 120, "Health": 340, "Speed": 80}
		};

		var f1 = {
			Name: "Castle of Nia",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Speed", "Amount": 50},
			"IFNPC": {"Attack": 175, "Defense": 125, "Health": 350, "Speed": 95}
		};

		var c2 = {
			Name: "Stonehill Keep",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Health", "Amount": 50},
			"IFNPC": {"Attack": 175, "Defense": 120, "Health": 350, "Speed": 95}
		};

		var a2 = {
			Name: "New Mordic",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Defense", "Amount": 50},
			"IFNPC": {"Attack": 225, "Defense": 98, "Health": 375, "Speed": 100}
		};

		var b2 = {
			Name: "Lost Castle of Nau",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Attack", "Amount": 75},
			"IFNPC": {"Attack": 238, "Defense": 120, "Health": 410, "Speed": 115}
		};

		var d2 = {
			Name: "White Forest",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Defense", "Amount": 75},
			"IFNPC": {"Attack": 255, "Defense": 140, "Health": 420, "Speed": 120}
		};

		var e2 = {
			Name: "Trails of Orath",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Attack", "Amount": 75},
			"IFNPC": {"Attack": 260, "Defense": 140, "Health": 420, "Speed": 125}
		};

		var f2 = {
			Name: "Mountain of Ghol",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Speed", "Amount": 75},
			"IFNPC": {"Attack": 265, "Defense": 165, "Health": 450, "Speed": 135}
		};

		var c3 = {
			Name: "Broken Fortress",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Health", "Amount": 75},
			"IFNPC": {"Attack": 265, "Defense": 145, "Health": 425, "Speed": 125}
		};

		var a3 = {
			Name: "City of Nowell",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Defense", "Amount": 125},
			"IFNPC": {"Attack": 275, "Defense": 155, "Health": 455, "Speed": 150}
		};

		var b3 = {
			Name: "Lost Forest of Kin",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Health", "Amount": 125},
			"IFNPC": {"Attack": 350, "Defense": 200, "Health": 475, "Speed": 175}
		};

		var d3 = {
			Name: "Orange Cove",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Attack", "Amount": 135},
			"IFNPC": {"Attack": 400, "Defense": 215, "Health": 515, "Speed": 180}
		};

		var e3 = {
			Name: "Darkness Falls",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Health", "Amount": 125},
			"IFNPC": {"Attack": 415, "Defense": 220, "Health": 515, "Speed": 200}
		};

		var f3 = {
			Name: "City of Nhal",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Speed", "Amount": 130},
			"IFNPC": {"Attack": 420, "Defense": 230, "Health": 525, "Speed": 210}
		};

		var c4 = {
			Name: "Elder Castle",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Attack", "Amount": 125},
			"IFNPC": {"Attack": 425, "Defense": 225, "Health": 515, "Speed": 210}
		};

		var a4 = {
			Name: "Burning City",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Defense", "Amount": 135},
			"IFNPC": {"Attack": 450, "Defense": 225, "Health": 550, "Speed": 225}
		};

		var b4 = {
			Name: "City of Jarok",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Health", "Amount": 140},
			"IFNPC": {"Attack": 500, "Defense": 245, "Health": 575, "Speed": 250}
		};

		var d4 = {
			Name: "Tower of Ra",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Defense", "Amount": 140},
			"IFNPC": {"Attack": 625, "Defense": 250, "Health": 575, "Speed": 275}
		};

		var f4 = {
			Name: "Castle of Krah",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Speed", "Amount": 145},
			"IFNPC": {"Attack": 635, "Defense": 265, "Health": 575, "Speed": 290}
		};

		var d5 = {
			Name: "Aepep's Cavern",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Attack", "Amount": 140},
			"IFNPC": {"Attack": 640, "Defense": 275, "Health": 575, "Speed": 300}
		};
		var d6 = {
			Name: "Lost Resort",
			OwnedBy: "NPC",
			LastDefeat: 0,
			Boost: {"Type": "Health", "Amount": 200},
			"IFNPC": {"Attack": 650, "Defense": 250, "Health": 575, "Speed": 325}
		};

		castleList.push(c1, a1, b1, d1, e1, f1, c2, a2, b2, d2, e2, f2, c3, a3, b3, d3, e3, f3, c4, a4, b4, d4, f4, d5, d6);
		dwCastles["Data"] = JSON.stringify(castleList);
		resp = "The castles have been registered!";
>>

[#CONTINUE#]
h?hunt={init}
#js >>
    use DragonWars;
    use dwHunts;
    use dwTimers;
    import "https://raw.githubusercontent.com/proxikal/Echo/master/Javascript/dwFunc.js";
    if(DragonWars["Mode"] == "online") {
        if(DragonWars[RawUserID]) {
            if(!dwTimers[RawUserID + "-train"]) {
                var obj = JSON.parse(DragonWars[RawUserID]);
                var now = Math.floor(Date.now() / 1000);
                var hunts = JSON.parse(dwHunts["Data"]);
                var isOwner = false;
                var huntUsers = [];
                var thuHunt = {};

                if(obj.Hunting == null) {
                    obj.Hunting = false;
                }

                for(i = 0; i < hunts.length; i++) {
                    if(hunts[i].Owner == RawUserID) {
                        isOwner = true;
                        huntUsers = hunts[i].Users;
                        theHunt = hunts[i];
                        hunts[i].Progress = true;
                        dwHunts["Data"] = JSON.stringify(hunts);
                    }
                }

                for(var hu = 0; hu < huntUsers.length; hu++) {
                    var hUser = JSON.parse(DragonWars[huntUsers[hu]]);
                    for(var t = 0; t < hUser.Timers.length; t++) {
                        if(hUser.Timers[t].Hunting) {
                            hUser.Timers.splice(t, 1);
                            hUser.Hunting = false;
                        }
                    }
                    DragonWars[huntUsers[hu]] = JSON.stringify(hUser);
                }
                if(obj.Timers == null) { obj.Timers = new Array(); }
                for(var o = 0; o < obj.Timers.length; o++) {
                    if(obj.Timers[o].Hunting) {
                        obj.Timers.splice(o, 1);
                        obj.Hunting = false;
                    }
                }

                if(isOwner == true) {
                    if(obj.Hunting == false) {
                        var str = "";
                        var rand = Math.floor(Math.random() * 120) + 30;
                        var original = 0;
                        var hasHuntersWings = HasHuntersWings(RawUserID, theHunt);

                        if(hasHuntersWings == true) {
                            original = rand;
                            if(rand > 100) {
                                rand = rand - 60;
                                var di = original - rand;
                                str = "\nSomeone in the hunt has `Hunters Wings` and has reduced the time by `(" + di + ")` seconds."; 
                            } else {
                                if(rand >= 60) {
                                    rand = rand - 30;
                                    var di = original - rand;
                                    str = "\nSomeone in the hunt has `Hunters Wings` and has reduced the time by `(" + di + ")` seconds."; 
                                }
                            }
                        }
                        var timestamp = Math.floor(Date.now() / 1000) + rand;
                        var timeDiff = timestamp - Math.floor(Date.now() / 1000); //in ms
                        var seconds = Math.round(timeDiff);
                        obj.Hunting = true;
                        var hunt = {
                            Hunting: timestamp
                        };

                        for(i = 0; i < theHunt.Users.length; i++) {
                            var usr = JSON.parse(DragonWars[theHunt.Users[i]]);
                            if(usr.Timers == null) { usr.Timers = new Array(); }
                            usr.Timers.push(hunt);
                            dwTimers[theHunt.Users[i] + "-hunting"] = seconds + "s";
                            DragonWars[theHunt.Users[i]] = JSON.stringify(usr);
                        }
                        obj.Timers.push(hunt);
                        dwTimers[RawUserID + "-hunting"] = seconds + "s";
                        DragonWars[RawUserID] = JSON.stringify(obj);
                        resp = "The great hunt has began! it will take " + seconds + " seconds." + str + "{ars:huntComplete}";
                    } else {
                        var timestamp = 0;
                        for(i = 0; i < obj.Timers.length; i++) {
                            if(obj.Timers[i]["Hunting"]) {
                                timestamp = obj.Timers[i]["Hunting"];
                            }
                        }
                        var timeDiff = timestamp - Math.floor(Date.now() / 1000); //in ms
                        var seconds = Math.round(timeDiff);
                        resp = "Your dragon is still in training. Please wait `(" + seconds + ")` seconds.";
                    }
                } else {
                    resp = "You're not the leader of your hunt. Only the leader can start the great hunt. or back out using `h?quit`";
                }
            } else {
                resp = "You can't start the hunt until you're finished training.";
            }
        } else {
            resp = "You have to register using `?register` before starting the game.";
        }
    } else {
        resp = DragonWars["ModeMsg"];
    }
>>

[#CONTINUE#]
h?vote={init}
#js >>
    use DragonWars;
    use dwHunts;
    use dwTimers;
    import "https://raw.githubusercontent.com/proxikal/Echo/master/Javascript/dwFunc.js";
    if(DragonWars[RawUserID]) {
        var hunts = JSON.parse(dwHunts["Data"]);
        var theHunt = GetTheHunt(RawUserID, hunts);
        var voted = false;
        var now = Math.floor(Date.now() / 1000);

        if(theHunt != null) {
            if(now >= theHunt.Start) {
                if(theHunt.Voted.length > 0) {
                    for(var v = 0; v < theHunt.Voted.length; v++) {
                        if(theHunt.Voted[v] == RawUserID) {
                            voted = true;
                        }
                    }
                }
                if(voted == false) {
                    theHunt.Voted.push(RawUserID);
                    var bar = Math.floor(theHunt.Users.length / 2);
                    if(theHunt.Voted.length >= bar) {
                        // start the hunt! half of the people voted to go!
                        var obj = JSON.parse(DragonWars[RawUserID]);
                        var rand = Math.floor(Math.random() * 120) + 30;

                        var timestamp = Math.floor(Date.now() / 1000) + rand;
                        var timeDiff = timestamp - Math.floor(Date.now() / 1000); //in ms
                        var seconds = Math.round(timeDiff);
                        obj.Hunting = true;
                        var hunt = {
                            Hunting: timestamp
                        };
                        UsersStartHunt(hunt, theHunt, timestamp);
                        if(obj.Timers == null) { obj.Timers = new Array(); }
                        obj.Timers.push(hunt);
                        dwTimers[RawUserID + "-hunting"] = seconds + "s";
                        DragonWars[RawUserID] = JSON.stringify(obj);
                        theHunt.Progress = true;
                        for(var h = 0; h < hunts.length; h++) {
                            if(hunts[h].ID == theHunt.ID) {
                                hunts[h] = theHunt;
                            }
                        }
                        dwHunts["Data"] = JSON.stringify(hunts);
                        resp = "The great hunt has began! it will take " + seconds + " seconds.{ars:huntComplete}";
                    } else {
                        resp = "You have voted to start the hunt.";
                        theHunt.Voted.push(RawUserID);
                        for(var h = 0; h < hunts.length; h++) {
                            if(hunts[h].ID == theHunt.ID) {
                                hunts[h] = theHunt;
                            }
                        }
                        DragonWars[RawUserID] = JSON.stringify(obj);
                    }
                }
            } else {
                resp = "You have to wait at least 2 minutes before starting a vote.";
            }
        }
    } else {
    	resp = "You have to register using `?register` before starting the game.";
    }
>>

[#CONTINUE#]
&h?users {params}={init}
#js >>
    use DragonWars;
    use dwHunts;
    import "https://raw.githubusercontent.com/proxikal/Echo/master/Javascript/dwFunc.js";
    if(DragonWars[RawUserID]) {
        var list = "";
        var hunts = JSON.parse(dwHunts["Data"]);
        var owner = "";
        var exists = 0;
        for(i=0;i<hunts.length;i++) {
            if(hunts[i].ID == Params) {
                exists++;
                for(u = 0; u < hunts[i].Users.length; u++) {
                    if(u == 0) {
                        list = list + "Leader: " + GetDragonName([hunts[i].Owner]) + "\n";
                    }
                    list = list + GetDragonName(hunts[i].Users[u]) + "\n";
                }
            }
        }
        if(exists > 0) {
            list = TrimSpace(list);
            if(list != "") {
                resp = "```\nDragons in this hunt\n-----------------\n" + list + "```";
            } else {
                resp = "There are no users in this hunt. Joint now with `h?join "+ Params + "`";
            }
        } else {
            resp = "This hunt ID is no longer valid.";        
        }
    } else {
    	resp = "You have to register using `?register` before starting the game.";
    }
>>

[#CONTINUE#]
?stop={init}
#js >>
    use DragonWars;
    use dwTimers;
    if(DragonWars[RawUserID]) {
        var obj = JSON.parse(DragonWars[RawUserID]);
        if(obj.Training == true) {
            obj.Training = false;
            for(i = 0; i < obj.Timers.length; i++) {
                if(obj.Timers[i]["Training"]) {
                    obj.Timers.splice(i, 1);
                }
            }
            delete dwTimers[RawUserID + "-train"];
            DragonWars[RawUserID] = JSON.stringify(obj);
            resp = "The dragon has been forced out of training, you have earned nothing.";
        } else {
            resp = "Your dragon is not in training";
        }
    } else {
    	resp = "You have to register using `?register` before starting the game.";
    }
>>

[#CONTINUE#]
huntComplete={init}
{arslock}
#js >>
    use dwTimers;
    if(dwTimers[RawUserID + "-hunting"]) {
        resp = "{sleep:" + dwTimers[RawUserID + "-hunting"] + "}{ars:huntDone}";
    }
>>

[#CONTINUE#]
trainDone={init}
{arslock}
#js >>
use DragonWars;
use dwTimers;
import "https://raw.githubusercontent.com/proxikal/Echo/master/Javascript/dwFunc.js";
if(DragonWars[RawUserID]) {
    var obj = JSON.parse(DragonWars[RawUserID]);
    var now = Math.floor(Date.now() / 1000);
    obj.Training = false;
    var hasPowerIncense = false;
    var hasDefenseIncense = false;
    var hasHealthIncense = false;
    var hasSpeedIncense = false;

    for(i = 0; i < obj.Timers.length; i++) {
        if(obj.Timers[i]["AttackIncense"]) {
            if(obj.Timers[i]["AttackIncense"] > now) {
                hasPowerIncense = true;
            }
        }
        if(obj.Timers[i]["DefenseIncense"]) {
            if(obj.Timers[i]["DefenseIncense"] > now) {
                hasDefenseIncense = true;
            }
        }
        if(obj.Timers[i]["HealthIncense"]) {
            if(obj.Timers[i]["HealthIncense"] > now) {
                hasHealthIncense = true;
            }
        }
        if(obj.Timers[i]["SpeedIncense"]) {
            if(obj.Timers[i]["SpeedIncense"] > now) {
                hasSpeedIncense = true;
            }
        }
        if(obj.Timers[i]["Training"]) {
            if(now > obj.Timers[i]["Training"]) {
                // Generate some training stats the dragon has earned.
                var atk = 0;
                var def = 0;
                var hlth = 0;
                var spd = 0;
                var chance = Math.random();

                if(chance < 0.55) {
                    atk = (Math.floor(Math.random() * 4) + 0);
                    def = (Math.floor(Math.random() * 4) + 0);
                    hlth = (Math.floor(Math.random() * 4) + 0);
                    spd = (Math.floor(Math.random() * 4) + 0);
                }
                if(chance < 0.45) {
                    atk = (Math.floor(Math.random() * 7) + 2);
                    def = (Math.floor(Math.random() * 7) + 2);
                    hlth = (Math.floor(Math.random() * 7) + 2);
                    spd = (Math.floor(Math.random() * 7) + 2);
                }

                if(chance < 0.25) {
                    atk = (Math.floor(Math.random() * 10) + 3);
                    def = (Math.floor(Math.random() * 10) + 3);
                    hlth = (Math.floor(Math.random() * 10) + 3);
                    spd = (Math.floor(Math.random() * 10) + 3);
                }
                if(chance > 0.55) {
                    atk = (Math.floor(Math.random() * 4) + 0);
                    def = (Math.floor(Math.random() * 4) + 0);
                    hlth = (Math.floor(Math.random() * 4) + 0);
                    spd = (Math.floor(Math.random() * 4) + 0);
                }
                var Diff = ComputeStatsToLimit(obj.Dragon);
                if(atk + def + hlth + spd > Diff) {
                    var rnd = Math.floor(Math.random() * 3);
                    if(rnd == 0) {
                        atk = Diff;
                    } else {
                        atk = 0;
                    }
                    if(rnd == 1) {
                        def = Diff;
                    } else {
                        def = 0;
                    }
                    if(rnd == 2) {
                        hlth = Diff;
                    } else {
                        hlth = 0;
                    }
                    if(rnd == 3) {
                        spd = Diff;
                    } else {
                        spd = 0;
                    }
                }
                if(atk < 0 || def < 0 || hlth < 0 || spd < 0) {
                    atk = 0;
                    def = 0;
                    hlth = 0;
                    spd = 0;
                }
                if(hasPowerIncense == true) {
                    var rb = Math.floor(Math.random() * 2) + 0;
                    if(hasDefenseIncense == false) {
                        if(rb == 0) {
                            def = def + Math.floor(atk / 3);
                        }
                    }
                    if(hasHealthIncense == false) {
                        if(rb == 1) {
                            hlth = hlth + Math.floor(atk / 3);
                        }
                    }
                    if(hasSpeedIncense == false) {
                        if(rb == 2) {
                            spd = spd + Math.floor(atk / 3);
                        }
                    }
                    atk = 0;
                }

                if(hasDefenseIncense == true) {
                    var rb = Math.floor(Math.random() * 2) + 0;
                    if(hasPowerIncense == false) {
                        if(rb == 0) {
                            atk = atk + Math.floor(def / 3);
                        }
                    }
                    if(hasHealthIncense == false) {
                        if(rb == 1) {
                            hlth = hlth + Math.floor(def / 3);
                        }
                    }
                    if(hasSpeedIncense == false) {
                        if(rb == 2) {
                            spd = spd + Math.floor(def / 3);
                        }
                    }
                    def = 0;
                }
                if(hasHealthIncense == true) {
                    var rb = Math.floor(Math.random() * 2) + 0;
                    if(hasPowerIncense == false) {
                        if(rb == 0) {
                            atk = atk + Math.floor(hlth / 3);
                        }
                    }
                    if(hasDefenseIncense == false) {
                        if(rb == 1) {
                            def = def + Math.floor(hlth / 3);
                        }
                    }
                    if(hasSpeedIncense == false) {
                        if(rb == 2) {
                            spd = spd + Math.floor(hlth / 3);
                        }
                    }
                    hlth = 0;
                }
                if(hasSpeedIncense == true) {
                    var rb = Math.floor(Math.random() * 2) + 0;
                    if(hasPowerIncense == false) {
                        if(rb == 0) {
                            atk = atk + Math.floor(spd / 3);
                        }
                    }
                    if(hasDefenseIncense == false) {
                        if(rb == 1) {
                            def = def + Math.floor(spd / 3);
                        }
                    }
                    if(hasHealthIncense == false) {
                        if(rb == 2) {
                            hlth = hlth + Math.floor(spd / 3);
                        }
                    }
                    hlth = 0;
                }
                obj.Dragon.Stats.Attack += atk;
                obj.Dragon.Stats.Defense += def;
                obj.Dragon.Stats.Health += hlth;
                obj.Dragon.Stats.Speed += spd;
                obj.Training = false;
                obj.Timers.splice(i, 1);
                var cash = Math.floor(Math.random() * 7500) + 500;
                var tokens = Math.floor(Math.random() * 15) + 1;

                DragonWars[RawUserID] = JSON.stringify(obj);
                delete dwTimers[RawUserID + "-train"];
                var emb = {};
                emb.title = obj.Dragon.Name + "'s Training Results";
                emb.description = "```\nADHS(" + atk + "/" + def + "/" + hlth + "/" + spd + ")```";
                emb.color = HTML2Int("#00FF00");
                emb.fields = new Array();
                emb.fields.push({"Name": "Cash Earned", "Value": cash.toString(), "Inline": true},{"Name": "Tokens Earned", "Value": tokens.toString(), "Inline": true});
                resp = emb;
                //resp = "Your dragon `" + obj.Dragon.Name + "` finished it's training.\n";
            }
        }
    }
}
>>

[#CONTINUE#]
&?rename {params}={init}
#js >>
    use DragonWars;
    if(DragonWars["Mode"] == "online") {
        if(DragonWars[RawUserID]) {
            var obj = JSON.parse(DragonWars[RawUserID]);
            var names = JSON.parse(DragonWars["DragonNames"]);
            var nameExists = false;
            if(obj.Exp == 0) { obj.Cash += 15000; }

            if(obj.Cash >= 15000) {
                Params = Replace(Params, "?rename ", "");
                Params = Params.replace(/([\`~_*])/g, "");
                Params = Replace(Params, "{", "");
                Params = Replace(Params, "}", "");

                if(Params.length <= 12) {
                    if(Params != "") {
                        for(i = 0; i < names.length; i++) {
                            if(names[i] == Params) {
                                nameExists = true;
                            }
                        }
                        if(nameExists == false) {
                            var fail = false;
                            if(obj.Stables) {
                                for(i = 0; i < obj.Stables.length; i++) {
                                    if(obj.Stables[i].Name == Params) {
                                        fail = true;
                                    }
                                }
                            }
                            if(fail == false) {
                                for(i = 0; i < names.length; i++) {
                                    if(names[i] == obj.Dragon.Name) {
                                        names.splice(i, 1);
                                    }
                                }
                                names.push(Params);
                                obj.Dragon.Name = Params;
                                DragonWars["DragonNames"] = JSON.stringify(names);
                                obj.Cash = (obj.Cash - 15000);
                                DragonWars[RawUserID] = JSON.stringify(obj);
                                resp = "You have named your dragon `" + Params + "` for `$15,000`";
                            } else {
                                resp = "You can't have multiple dragons with the same name.";
                            }
                        } else {
                            resp = "Sorry, this dragon name has already been chosen by someone.";
                        }
                    } else {
                        resp = "You need to choose a name for your Dragon.";
                    }
                } else {
                    resp = "The dragon name cannot exceed 12 characters.";
                }
            } else {
                resp = "You don't have `$15,000` cash to rename your dragon.";
            }
        } else {
            resp = "You need to register to the game in order to play! Type: `?register`";
        }
    } else {
        resp = DragonWars["ModeMsg"];
    }
>>

[#CONTINUE#]
&h?start {params}={init}
#js >>
    use DragonWars;
    use dwTimers;
    use dwHunts;
    if(DragonWars["Mode"] == "online") {
        if(DragonWars[RawUserID]) {
            if(!dwTimers[RawUserID + "-train"]) {
                var obj = JSON.parse(DragonWars[RawUserID]);
                var limit = 0;
                var ownerAutoStart = false; // the owner types h?start -a to auto start the hunt.

                if(Params != "h?start" || Params != "") {
                    if(Params != "-a") {
                        limit = parseInt(Params);
                    } else {
                        limit = 0;
                        ownerAutoStart = true;
                    }
                }

                if(!dwHunts["Data"]) {
                    dwHunts["Data"] = "[]";
                }

                var hunts = JSON.parse(dwHunts["Data"]);
                var id1 = Math.floor(Math.random() * 99) + 11;
                var id2 = Math.floor(Math.random() * 99) + 11;
                var id = id1.toString() + id2.toString();
                var now = Math.floor(Date.now() / 1000) + 120;

                var exists = 0;
                for(i = 0; i < hunts.length; i++) {
                    if(hunts[i].ID == id) {
                        id1 = Math.floor(Math.random() * 99) + 33;
                        id2 = Math.floor(Math.random() * 99) + 33;
                        id = id1.toString() + id2.toString();
                    }
                    if(hunts[i].Owner == RawUserID) {
                        exists++;
                    }
                    for(e = 0; e < hunts[i].Users.length; e++) {
                        if(hunts[i].Users[e].ID == RawUserID) {
                            exists++;
                        }
                    }
                }

                if(exists == 0) {
                    // start the hunt!
                    var hunt = {
                        ID: id,
                        Owner: RawUserID,
                        Start: now,
                        Users: [],
                        Voted: [],
                        MaxUsers: limit,
                        Progress: false
                    };
                    hunts.push(hunt);
                    dwHunts["Data"] = JSON.stringify(hunts);
                    if(ownerAutoStart == false) {
                        resp = "The great call for the hunt is running through your blood.. Start alone or share this id with your friends! `h?join " + id + "` to start: `h?hunt` *(The more people, the bigger the rewards!)* Enjoy!!";
                    } else {
                        resp = "{ars:h?hunt}";
                    }
                } else {
                    resp = "You're already in a hunt. Please wait or type `h?quit`";
                }
            } else {
                resp = "You can't start a hunt when you're training. If this is an error type `?stop`";
            }
        } else {
            resp = "You have to register using `?register` before starting the game.";
        }
    } else {
        resp = DragonWars["ModeMsg"];
    }
>>

[#CONTINUE#]
?register={init}
#js >>
    use DragonWars;
    if(DragonWars["Mode"] == "online") {
    	var rndType = ["fire", "grass", "rock", "steel", "water", "dark", "light"];
    	var m = Math.floor(Math.random() * rndType.length);
        var Stats = { Attack: 5, Defense: 5, Health: 5, Speed: 5, Type: rndType[m], Moves: []};
        var dragonNames = ["Scarry", "Nardos", "Ascop", "Draco", "Derekin", "Ashlan", "Stoneface", "BrokenTooth", "Narru", "Haiden", "Dorak", "Anon"];
        var randNum = Math.floor(Math.random() * 99) + 11;
        var ml = dragonNames.length;
        var mlx = Math.floor(Math.random() * 9) + 0;
        var oi = parseInt(DragonWars["LastDragonID"]);
        var NewID = oi+1;
        var newDragon = { ID: NewID, Name: dragonNames[mlx] + randNum, Stats: Stats };
        var newUser = { Level: 1, Exp: 0, Tokens: 0, Cash: 6500, Win: 0, Loss: 0, Takeovers: 0, NPCWins: 0, NPCLoss: 0, Training: false, Battling: "", Dragon: newDragon, Timers: [] };
        if(!DragonWars[RawUserID]) {
            DragonWars[RawUserID] = JSON.stringify(newUser);
            DragonWars["LastDragonID"] = NewID.toString();
            resp = "You have been registered to the game, choose a name for your dragon. Type: `?rename NameHere`";
        } else {
            resp = "You're already registered to the system. Type ?help for information on the game.";
        }
    } else {
        resp = DragonWars["ModeMsg"];
    }
>>

[#CONTINUE#]
h?help={init}
```md
The Great Hunts Help Menu
-------------------
h?start
-  Starts a hunting Session and waits for people to join.

h?start <number>
- Starts a hunting Session and waits for x people than auto starts.

h?start -a
- Automatically start a hunting session and begin without any users.

h?join <HuntID>
- Joins a specific hunt by ID.

h?list
- Shows active hunts waiting to go out!

h?users <HuntID>
- Shows the dragons in the hunt.

h?hunt
- Begins a hunt that's not in process.

h?stop
- Exits out of a training session that's not in progress.

h?quit
- Used if h?stop doesn't work (This will cancel an entire hunt if you're the owner) Otherwise it will force you out of the hunts users list.

Hunting Formulas
-------------------
Based on the type of dragons that join a single hunt
will yield different reward boosts.
- Fire = Attack, Speed
- Grass = Defense, Health
- Water = Speed, Attack
- Steel = Speed, Defense
- Light = Health, Speed
- Dark = Attack, Health
- Rock = Health, Defense

Cooldowns Command:
-------------------
?cooldowns
- Can be used to see how much time you have between hunts.
```

[#CONTINUE#]
h?stop={init}
#js >>
	use DragonWars;
    use dwHunts;
    use dwTimers;

	if(DragonWars[RawUserID]) {
		var obj = JSON.parse(DragonWars[RawUserID]);
		var hunts = JSON.parse(dwHunts["Data"]);
		var exists = 0;
		var huntid = 0;
		var valid = 0;
		for(i = 0; i < hunts.length; i++) {
			if(hunts[i].Owner == RawUserID) {
				exists++;
				valid++;
				huntid = i;
				obj.Hunting = false;
				obj.Training = false;
				delete dwTimers[RawUserID + "-train"];
				delete dwTimers[RawUserID + "-hunting"];
				if(obj.Timers == null) { obj.Timers = new Array(); }
				for(t = 0; t < obj.Timers.length; t++) {
					if(obj.Timers[t]["Hunting"]) {
						obj.Timers.splice(t, 1);
					}
				}
				for(u = 0; u < hunts[i].Users.length; u++) {
					var usr = JSON.parse(DragonWars[hunts[i].Users[u]]);
					if(usr.Timers == null) { usr.Timers = new Array(); }
					usr.Hunting = false;
					usr.Training = false
					delete DragonWars[hunts[i].Users[u] + "-hunting"];
					delete DragonWars[hunts[i].Users[u] + "-train"];
					for(t = 0; t < usr.Timers.length; t++) {
						if(usr.Timers[t]["Hunting"]) {
							usr.Timers.splice(t, 1);
						}
					}
					DragonWars[hunts[i].Users[u]] = JSON.stringify(usr);
				}
				hunts.splice(huntid, 1);
				dwHunts["Data"] = JSON.stringify(hunts);
				DragonWars[RawUserID] = JSON.stringify(obj);
				resp = "The hunt has been canceled!";
			}
		}

		if(exists == 0) {
			for(i = 0; i < hunts.length; i++) {
				for(u = 0; u < hunts[i].Users.length; u++) {
					if(hunts[i].Users[u] == RawUserID) {
						var usr = JSON.parse(DragonWars[hunts[i].Users[u]]);
						usr.Hunting = false;
						delete dwTimers[hunts[i].Users[u] + "-hunting"];
						for(t = 0; t < usr.Timers.length; t++) {
							if(usr.Timers[t]["Hunting"]) {
								usr.Timers.splice(t, 1);
							}
						}
						valid++;
						DragonWars[hunts[i].Users[u]] = JSON.stringify(usr);
						resp = "You have left the great hunt...";
					}
				}
			}
		}
		if(valid == 0) {
			resp = "You're not a member of any hunt. Type `h?start` to begin a hunt!";
		}
	} else {
		resp = "You have to register using `?register` before starting the game.";
	}
>>

[#CONTINUE#]
trainComplete={init}
{arslock}
#js >>
    use dwTimers;
    if(dwTimers[RawUserID + "-train"]) {
        resp = "{sleep:" + dwTimers[RawUserID + "-train"] + "}{ars:trainDone}";
    }
>>

[#CONTINUE#]
?train={init}
#js >>
    use DragonWars;
    use dwTimers;
    use dwHunts;
    import "https://raw.githubusercontent.com/proxikal/Echo/master/Javascript/dwFunc.js";
    if(!dwTimers[RawUserID + "-hunting"]) {
        if(DragonWars["Mode"] == "online") {
            if(DragonWars[RawUserID]) {
                var obj = JSON.parse(DragonWars[RawUserID]);
                if(HasMaxStats(obj.Dragon) == false) {
                    var now = Math.floor(Date.now() / 1000);
                    var hunts = JSON.parse(dwHunts["Data"]);
                    var hunting = false;
                    var hasTrainingShoes = false;

                    for(i=0;i<hunts.length;i++) {
                        if(hunts[i].Owner == RawUserID) {
                            hunting = true;
                        }
                        for(u = 0; u < hunts[i].Users.length; u++) {
                            if(hunts[i].Users[u] == RawUserID) {
                                hunting = true;
                            }
                        }
                    }
                    for(i = 0; i < obj.Timers.length; i++) {
                        if(obj.Timers[i]["Training"]) {
                            if(now > obj.Timers[i]["Training"]) {
                                obj.Timers.splice(i, 1);
                                obj.Training = false;
                            }
                        }
                        if(obj.Timers[i]["TrainingShoes"]) {
                            if(obj.Timers[i]["TrainingShoes"] > now) {
                                hasTrainingShoes = true;
                            }
                        }
                    }

                    if(hunting == false) {
                        if(obj.Training == false) {
                            if(obj.Cash >= 250) {
                                var rand = Math.floor(Math.random() * 120) + 30;
                                var original = rand;
                                var str = "";
                                if(hasTrainingShoes == true) {
                                    if(rand >= 100) {
                                        rand = rand - 60;
                                    }
                                    if(rand >= 60) {
                                        rand = rand - 30;
                                    }
                                    original = original - rand;
                                    str = "\nYou're `Trainers Shoes` have cut down the time by `(" + original + ")` seconds.";
                                }
                                var timestamp = Math.floor(Date.now() / 1000) + rand;
                                var timeDiff = timestamp - Math.floor(Date.now() / 1000); //in ms
                                var seconds = Math.round(timeDiff);
                                obj.Training = true;
                                var train = {
                                    Training: timestamp
                                };
                                obj.Timers.push(train);
                                dwTimers[RawUserID + "-train"] = seconds + "s";
                                obj.Cash -= 250;
                                DragonWars[RawUserID] = JSON.stringify(obj);
                                resp = "Your dragon has been sent to training, it will take " + seconds + " seconds."+str+"{ars:trainComplete}";
                            } else {
                                resp = "You don't have enough cash to train. Fight some NPCS! `n?list pagenumber`";
                            }
                        } else {
                            var timestamp = 0;
                            for(i = 0; i < obj.Timers.length; i++) {
                                if(obj.Timers[i]["Training"]) {
                                    timestamp = obj.Timers[i]["Training"];
                                }
                            }
                            var timeDiff = timestamp - Math.floor(Date.now() / 1000); //in ms
                            var seconds = Math.round(timeDiff);
                            resp = "Your dragon is still in training. Please wait `(" + seconds + ")` seconds.";
                        }
                    } else {
                        resp ="You can't go off to train while you're waiting for the great hunt! Leave the hunt using `h?quit` or wait for the hunt to finish.";
                    }
                } else {
                    resp = obj.Dragon.Name + " has reached the max stats of **" + DragonWars["statLimit"] + "**. Go hunt, fight npcs and take on other players or castles to get stat boosts!";
                }
            } else {
                resp = "You have to register using `?register` before starting the game.";
            }
        } else {
            resp = DragonWars["ModeMsg"];
        }
    } else {
        resp = "You can't train until your dragon is finished hunting.";
    }
>>

[#CONTINUE#]
x?castle={init}
When adding an castle you need to copy the object and place it as the params in the command.
example:
```
?regCastle {
    "Name": "Carnage Castle",
    "OwnedBy": "NPC",
    "LastDefeat": 0,
    "Boost": {"Type": "Defense", "Amount": 150},
    "IFNPC": {"Attack": 475, "Defense": 270, "Health": 680}
}
```

[#CONTINUE#]
&n?attack {params}={init}
#js >>
    use DragonWars;
    use dwTimers;
    use dwCastles;

    import "https://raw.githubusercontent.com/proxikal/Echo/master/Javascript/dwFunc.js";
    if(DragonWars["Mode"] == "online") {
        if(!dwTimers[RawUserID + "-train"] && !dwTimers[RawUserID + "-hunting"]) { 
            if(DragonWars[RawUserID]) {
                var obj = JSON.parse(DragonWars[RawUserID]);
                var castles = JSON.parse(dwCastles["Data"]);
                var battlelog = "```\n";

                var now = Math.floor(Date.now() / 1000);
                var ready = false;
                var exists = 0;
                for(i = 0; i < obj.Timers.length; i++) {
                    if(obj.Timers[i]["NPC"]) {
                        exists++;
                        if(now >= obj.Timers[i]["NPC"]) {
                            ready = true;
                            obj.Timers.splice(i, 1);
                        }
                    }
                }

                if(exists == 0) { ready = true; }

                if(ready == true) {
                    var att = obj.Dragon.Stats.Attack;
                    var def = obj.Dragon.Stats.Defense;
                    var hlt = obj.Dragon.Stats.Health;
                    var spd = obj.Dragon.Stats.Speed;
                    var adh = Math.floor(def / 2);
                    hlt += adh;
                    var npcAtt = 0;
                    var npcDef = 0;
                    var npcHlt = 0;
                    var npcSpd = 0;
                    var randExp = 0;
                    var randCash = 0;
                    var expBonus = 0;

                    for(i=0;i<castles.length;i++) {
                        if(castles[i].OwnedBy == RawUserID) {
                            if(castles[i].Boost.Type == "Attack") {
                                att += castles[i].Boost.Amount;
                            }
                            if(castles[i].Boost.Type == "Defense") {
                                def += castles[i].Boost.Amount;
                            }
                            if(castles[i].Boost.Type == "Health") {
                                hlt += castles[i].Boost.Amount;
                            }
                            if(castles[i].Boost.Type == "Speed") {
                                spd += castles[i].Boost.Amount;
                            }
                            if(castles[i].Boost.Type == "Exp") {
                                expBonus += castles[i].Boost.Amount;
                            }
                        }
                    }
                    var npcs = JSON.parse(DragonWars["NPCS"]);
                    var exists = false;
                    for(i = 0; i < npcs.length; i++) {
                        if(npcs[i].Name.toLowerCase() == Params.toLowerCase()) {
                            exists = true;
                            npcAtt = npcs[i].Attack;
                            npcDef = npcs[i].Defense;
                            npcHlt = npcs[i].Health;
                            npcHlt = npcs[i].Speed;
                            var ndh = Math.floor(npcDef / 2);
                            npcHlt += ndh;
                            randExp = Math.floor(Math.random() * npcs[i].Exp[1]) + npcs[i].Exp[0];
                            randCash = Math.floor(Math.random() * npcs[i].Cash[1]) + npcs[i].Cash[0];
                        }
                    }

                    if(exists == true) {
                        var PlayerHealth = hlt;
                        var NPCHealth = npcHlt;
                        var winner = "";

                        // Run the Game:
                        for(i = 1; i < 100; i++) {

                            if(npcSpd > spd) {
                                if(PlayerHealth > 0 && NPCHealth > 0) {
                                    var lowHit = Math.floor(npcAtt / 2);
                                    var dmg = Math.floor(Math.random() * npcAtt) + lowHit;
                                    if(dmg > npcAtt) { dmg = npcAtt; }
                                    PlayerHealth -= dmg;
                                    if(dmg > npcAtt) {
                                        battlelog += "NPC Critically Hit Player for: " + commafy(dmg) + " damage.\n";
                                    } else {
                                        battlelog += "NPC Hit Player for: " + commafy(dmg) + " damage.\n";
                                    }
                                }

                                if(NPCHealth > 0 && PlayerHealth > 0) {
                                    var lowHit = Math.floor(att / 2);
                                    var dmg = Math.floor(Math.random() * att) + lowHit;
                                    if(dmg > att) { dmg = att; }
                                    NPCHealth -= dmg;
                                    if(dmg > att) {
                                        battlelog += "Player Critically Hit NPC for: " + commafy(dmg) + " damage.\n";
                                    } else {
                                        battlelog += "Player Hit NPC for: " + commafy(dmg) + " damage.\n";
                                    }
                                }
                            } else {
                                if(NPCHealth > 0 && PlayerHealth > 0) {
                                    var lowHit = Math.floor(att / 2);
                                    var dmg = Math.floor(Math.random() * att) + lowHit;
                                    if(dmg > att) { dmg = att; }
                                    NPCHealth -= dmg;
                                    if(dmg > att) {
                                        battlelog += "Player Critically Hit NPC for: " + commafy(dmg) + " damage.\n";
                                    } else {
                                        battlelog += "Player Hit NPC for: " + commafy(dmg) + " damage.\n";
                                    }
                                }
                                if(PlayerHealth > 0 && NPCHealth > 0) {
                                    var lowHit = Math.floor(npcAtt / 2);
                                    var dmg = Math.floor(Math.random() * npcAtt) + lowHit;
                                    if(dmg > npcAtt) { dmg = npcAtt; }
                                    PlayerHealth -= dmg;
                                    if(dmg > npcAtt) {
                                        battlelog += "NPC Critically Hit Player for: " + commafy(dmg) + " damage.\n";
                                    } else {
                                        battlelog += "NPC Hit Player for: " + commafy(dmg) + " damage.\n";
                                    }
                                }
                            }

                            if(PlayerHealth <= 0) {
                                // The NPC has won..
                                battlelog += "NPC killed " + obj.Dragon.Name + " in (" + i + ") moves.\n";
                                winner = "NPC";
                                break;
                            }

                            if(PlayerHealth <= 0 && NPCHealth <= 0) {
                                battlelog += obj.Dragon.Name + " killed the NPC in (" + i + ") moves.\n";
                                winner = "Player";
                                break;
                            }

                            if(NPCHealth <= 0) {
                                battlelog += obj.Dragon.Name + " killed the NPC in (" + i + ") moves.\n";
                                // The Player has won..
                                winner = "Player";
                                break;
                            }
                        }

                        if(winner == "Player") {
                            // Give them cash and experience (And a small percentage to get tokens)
                            var chanceBoost = 0.50;
                            var text = "";
                            var bonus = "";
                            if(HasMaxStats(obj.Dragon) == false) {
                                if(Math.random() < chanceBoost) {
                                    // Give them some stats.
                                    var name = "";
                                    var rand = Math.floor(Math.random() * 3) + 0;
                                    var boost = Math.floor(Math.random() * 5) + 1;
                                    var maxDif = ComputeStatsToLimit(obj.Dragon);
                                    if(boost >= maxDif) {
                                        boost = maxDif;
                                    }

                                    if(rand == 0) { obj.Dragon.Stats.Speed += boost; name = "Speed"; }
                                    if(rand == 1) { obj.Dragon.Stats.Attack += boost; name = "Attack"; }
                                    if(rand == 2) { obj.Dragon.Stats.Defense += boost; name = "Defense"; }
                                    if(rand == 3) { obj.Dragon.Stats.Health += boost; name = "Health"; }
                                    bonus = "*Nice!!* " + obj.Dragon.Name + " has earned **(" + boost + ") " + name + "**";
                                }
                            }

                            text = "You have won! You've earned **$" + commafy(randCash) + "** and ("+commafy(randExp)+") experience\n";
                            var randTokens = Math.floor(Math.random() * 15) + 1;
                            var emb = {};
                            emb.title = Params + "'s Battle Report";
                            emb.color = HTML2Int("#00FF00");
                            emb.description = text + bonus + battlelog + "```";
                            var fields = new Array();
                            var f1 = {
                                name: "Cashed Earned",
                                value: "$" + commafy(randCash).toString(),
                                inline: true
                            };
                            var f2 = {
                                name: "Exp Earned",
                                value: commafy(randExp).toString(),
                                inline: true
                            };
                            var f3 = {
                                name: "Tokens Earned",
                                value: "Ŧ" + commafy(randTokens).toString(),
                                inline: true
                            };
                            fields.push(f1, f2, f3);
                            emb.fields = fields;
                            resp = emb;

                            //resp = text + bonus + battlelog + "```";
                            var d = Math.floor(Date.now() / 1000) + 60;
                            randExp += expBonus;
                            obj.Cash += randCash;
                            obj.Exp += randExp;
                            var timer = { NPC: d };
                            obj.Timers.push(timer);
                            obj.NPCWins += 1;
                            DragonWars[RawUserID] = JSON.stringify(obj);
                        } else {
                            var d = Math.floor(Date.now() / 1000) + 60;
                            var timer = { NPC: d };
                            obj.Timers.push(timer);
                            var exp = Math.floor(randExp / 2);
                            exp += expBonus;
                            var cash = Math.floor(randCash / 2);
                            obj.Cash += cash;
                            obj.Exp += exp;
                            obj.NPCLoss += 1;
                            DragonWars[RawUserID] = JSON.stringify(obj);
                            var text = "You have lost this battle. Better luck next time.\nPlayer Health: `("+commafy(PlayerHealth)+")` NPC Health: `(" + commafy(NPCHealth) + ")`" + battlelog + "```";

                            var randTokens = Math.floor(Math.random() * 6) + 1;
                            var emb = {};
                            emb.title = Params + "'s Battle Report";
                            emb.color = HTML2Int("#FF0000");
                            emb.description = text;
                            var fields = new Array();
                            var f1 = {
                                name: "Cashed Earned",
                                value: "$" + commafy(cash).toString(),
                                inline: true
                            };
                            var f2 = {
                                name: "Exp Earned",
                                value: commafy(exp).toString(),
                                inline: true
                            };
                            var f3 = {
                                name: "Tokens Earned",
                                value: "Ŧ" + commafy(randTokens).toString(),
                                inline: true
                            };
                            fields.push(f1, f2, f3);
                            emb.fields = fields;
                            resp = emb;

                        }
                    } else {
                        resp = "The NPC Doesn't exist. Type `n?list pagenumber` for a list of available NPCS.";
                    }
                } else {
                    var now = Math.floor(Date.now() / 1000);
                    var timeLeft = 0;
                    for(i = 0; i < obj.Timers.length; i++) {
                        if(obj.Timers[i]["NPC"]) {
                            timeLeft = obj.Timers[i]["NPC"];
                        }
                    }
                    var timeDiff = timeLeft - now; //in ms
                    var seconds = Math.round(timeDiff);
                    resp = "You have to wait `(" + seconds + ")` seconds before attacking an npc.";
                }
            } else {
                resp = "You have to register using `?register` before starting the game.";
            }
        } else {
            resp = "You can't go off to battle while your dragon is training or huntin.";
        }
    } else {
        resp = DragonWars["ModeMsg"];
    }
>>

[#CONTINUE#]
&n?list {params}={init}
#js >>
    use DragonWars;
    import "https://raw.githubusercontent.com/proxikal/Echo/master/Javascript/dwFunc.js";
    if(DragonWars["Mode"] == "online") {
        if(DragonWars[RawUserID]) {
            var list = JSON.parse(DragonWars["NPCS"]);
            var data = "```md\n";
            var page = 1;
            if(Params != "n?list") {
                page = parseInt(Params);
            } else {
                page = 1;
            }

            var perPage = 10;
            var totalPages = Math.ceil(list.length / perPage);
            var pgn = Pagination(page, totalPages, perPage, list);
            
            var cnt = 0;
            if(page > 1) {
                cnt = 1;
            }
            var emb = {};
            for(i = pgn.Start; i < pgn.End; i++) {
                data = data + "Name: " + list[i].Name + " ADHS("+list[i].Attack+"/"+list[i].Defense+"/"+list[i].Health+"/" + list[i].Speed + ")\n";
            }
            emb.title = "Showing " + pgn.Info;
            emb.color = HTML2Int("#016ef1");
            emb.description = data + "```";
            var footer = {
                text: "Total Pages: " + totalPages.toString()
            };
            emb.footer = footer;
            resp = emb
        } else {
            resp = DragonWars["ModeMsg"];
        }
    } else {
        resp = "You have to register using `?register` before starting the game.";
    }
>>

[#CONTINUE#]
&?exchange {params}={init}
#js >>
    use DragonWars;
    if(DragonWars["Mode"] == "online") {
        if(DragonWars[RawUserID]) {
            var obj = JSON.parse(DragonWars[RawUserID]);
            if(Contains(Params, " ")) {
            	var target = Params.split(" ")[0];
            	var a = Params.split(" ")[1];
	            var amn = parseInt(a);
	            var mth = Math.floor(amn / 10000);
	            if(target.toLowerCase() == "cash") {
		            if(obj.Cash >= amn) {
		                if(mth > 0) {
		                    obj.Tokens += mth;
		                    obj.Cash -= amn;
		                    DragonWars[RawUserID] = JSON.stringify(obj);
		                    resp = "You have gained `(" + mth + ")` token(s).";
		                } else {
		                    resp = "You didn't offer enough money to exchange. `$10,000` = **1 Token**";
		                }
		            } else {
		                resp = "You don't have enough money for that.";
		            }
	            }
	            if(target.toLowerCase() == "exp") {
		            if(obj.Exp >= amn) {
		            	var mth2 = Math.floor(amn / 20000);
		                if(mth2 > 0) {
		                    obj.Tokens += mth2;
		                    obj.Exp -= amn;
		                    DragonWars[RawUserID] = JSON.stringify(obj);
		                    resp = "You have gained `(" + mth2 + ")` token(s).";
		                } else {
		                    resp = "You didn't offer enough exp to exchange. `20,000 exp` = **1 Token**";
		                }
		            } else {
		                resp = "You don't have enough money for that.";
		            }
	            }
            } else {
            	resp = "You need to define what you want to exchange for tokens (Cash or Exp) Example: `?exchange Cash 250000` or `?exchange Exp 250000`";
            }
        } else {
        	resp = "You have to register using `?register` before starting the game.";
        }
    } else {
        resp = DragonWars["ModeMsg"];
    }
>>

[#CONTINUE#]
&?shutdown {params}={init}
#js >>
    use DragonWars;
    if(DragonWars["Mode"] == "online") {
        if(MemberHasRole("243136044466176001", RawUserID, "Management")) {
            DragonWars["Mode"] = "offline";
            DragonWars["ModeMsg"] = Params;
            resp = "The system is not shutdown and the message has been set to `" + Params + "`";
        }
    } else {
        resp = "The system is already shut down. Type: `?initiate`";    
    }
>>

[#CONTINUE#]
&h?join {params}={init}
#js >>
    use DragonWars;
    use dwHunts;
    use dwTimers;
    function Exists(users, user) {
        for(i = 0; i < users.length; i++) {
            if(users[i] == user) {
                return true;
            }
        }
        return false;
    }
    if(DragonWars["Mode"] == "online") {
        if(DragonWars[RawUserID]) {
            if(!dwTimers[RawUserID + "-train"] && !dwTimers[RawUserID + "-hunting"]) {
                var obj = JSON.parse(DragonWars[RawUserID]);
                var hunts = JSON.parse(dwHunts["Data"]);
                var isMax = false;
                for(i = 0; i < hunts.length; i++) {
                    if(hunts[i].ID == Params) {
                        if(hunts[i].Owner != RawUserID) {
                            if(hunts[i].Progress == false) {
                                var exists = false;
                                for(u = 0; u < hunts[i].Users.length; u++) {
                                    if(hunts[i].Users[u] == RawUserID) {
                                        exists = true;
                                    }
                                }
                                if(hunts[i].MaxUsers > 0) {
                                    if(hunts[i].MaxUsers >= hunts[i].Users.length) {
                                        isMax = true;
                                    }
                                }
                                if(exists == false) {
                                    hunts[i].Users.push(RawUserID);
                                    dwHunts["Data"] = JSON.stringify(hunts);
                                    var extra = "";
                                    if(isMax == true) {
                                        extra += "\nThe max amount of users has joined this hunt.{ars:huntMaxUsers}";
                                    }
                                    resp = "You have joined the Hunt ID: **" + hunts[i].ID + "**" + extra;
                                } else {
                                    resp = "You are already in this hunt.";
                                }
                            } else {
                                resp = "Sorry, this hunt is already in progress. You can start your own `h?start`";
                            }
                        } else {
                            resp = "You can't join a hunt you're leader of..";
                        }
                    }
                }
            } else {
                resp = "You can't join a hunt while training or hunting.";
            }
        } else {
            resp = "You need to register to the game first. `?register`";
        }
    } else {
        resp = DragonWars["ModeMsg"];
    }
>>

[#CONTINUE#]
huntMaxUsers={init}
{arslock}
#js >>
    use DragonWars;
    use dwHunts;
    use dwTimers;
    import "https://raw.githubusercontent.com/proxikal/Echo/master/Javascript/dwFunc.js";
    var ownerID = "";
    var now = Math.floor(Date.now() / 1000);
    var hunts = JSON.parse(dwHunts["Data"]);
    for(var i = 0; i < hunts.length; i++) {
        if(hunts[i].ID == Params) {
            ownerID = hunts[i].Owner;
        }
    }
    var huntUsers = [];
    var thuHunt = {};

    for(var i = 0; i < hunts.length; i++) {
        if(hunts[i].ID == Params) {
            ownerID = hunts[i].Owner;
            huntUsers = hunts[i].Users;
            theHunt = hunts[i];
            hunts[i].Progress = true;
            dwHunts["Data"] = JSON.stringify(hunts);
        }
    }
    var obj = JSON.parse(DragonWars[ownerID]);

    if(obj.Hunting == null) {
        obj.Hunting = false;
    }


    for(var hu = 0; hu < huntUsers.length; hu++) {
        var hUser = JSON.parse(DragonWars[huntUsers[hu]]);
        for(var t = 0; t < hUser.Timers.length; t++) {
            if(hUser.Timers[t].Hunting) {
                hUser.Timers.splice(t, 1);
                hUser.Hunting = false;
            }
        }
        DragonWars[huntUsers[hu]] = JSON.stringify(hUser);
    }


    if(obj.Timers == null) { obj.Timers = new Array(); }

    for(var o = 0; o < obj.Timers.length; o++) {
        if(obj.Timers[o].Hunting) {
            obj.Timers.splice(o, 1);
            obj.Hunting = false;
        }
    }

    if(obj.Hunting == false) {
        var str = "";
        var rand = Math.floor(Math.random() * 120) + 30;
        var original = 0;
        var hasHuntersWings = HasHuntersWings(ownerID, theHunt);

        if(hasHuntersWings == true) {
            original = rand;
            if(rand > 100) {
                rand = rand - 60;
                var di = original - rand;
                str = "\nSomeone in the hunt has `Hunters Wings` and has reduced the time by `(" + di + ")` seconds."; 
            } else {
                if(rand >= 60) {
                    rand = rand - 30;
                    var di = original - rand;
                    str = "\nSomeone in the hunt has `Hunters Wings` and has reduced the time by `(" + di + ")` seconds."; 
                }
            }
        }
        var timestamp = Math.floor(Date.now() / 1000) + rand;
        var timeDiff = timestamp - Math.floor(Date.now() / 1000); //in ms
        var seconds = Math.round(timeDiff);
        obj.Hunting = true;
        var hunt = {
            Hunting: timestamp
        };

        for(i = 0; i < theHunt.Users.length; i++) {
            var usr = JSON.parse(DragonWars[theHunt.Users[i]]);
            if(usr.Timers == null) { usr.Timers = new Array(); }
            usr.Timers.push(hunt);
            dwTimers[theHunt.Users[i] + "-hunting"] = seconds + "s";
            DragonWars[theHunt.Users[i]] = JSON.stringify(usr);
        }
        obj.Timers.push(hunt);
        dwTimers[ownerID + "-hunting"] = seconds + "s";
        DragonWars[ownerID] = JSON.stringify(obj);
        resp = "The great hunt has began! it will take " + seconds + " seconds." + str + "{ars:huntMaxComplete}";
    } else {
        var timestamp = 0;
        for(i = 0; i < obj.Timers.length; i++) {
            if(obj.Timers[i]["Hunting"]) {
                timestamp = obj.Timers[i]["Hunting"];
            }
        }
        var timeDiff = timestamp - Math.floor(Date.now() / 1000); //in ms
        var seconds = Math.round(timeDiff);
        resp = "Your dragon is still in hunting. Please wait `(" + seconds + ")` seconds.";
    }
>>

[#CONTINUE#]
&m?setprice {params}={init}
#js >>
    use DragonWars;
    var market = JSON.parse(DragonWars["Market"]);
    if(Contains(Params, " - ")) {
        var name = Params.split(" - ")[0];
        var price = Params.split(" - ")[1];
        var id = 0;
        var exists = false;
        for(i=0;i<market.Items.length;i++) {
            if(market.Items[i].Name == name) {
                exists += 1;
                id = i;
            }
        }
        if(exists > 0) {
            market.Items[id].Price = parseInt(price);
            DragonWars["Market"] = JSON.stringify(market);
            resp = "You have changed the price for `" + name + "` to `$" + price + "`";
        }
    }
>>

[#CONTINUE#]
?modhelp={init}
#js >>
    if(MemberHasRole("243136044466176001", RawUserID, "Management")) {
        var cmds = "```\n";
        cmds += "?remHunt ID  - Removes a hunt from the system that was bugged\n";
        cmds += "?shutdown Shutdown Message  (Disables all commands and shows a message)\n";
        cmds += "?initiate - Turns the system back on for the public to use\n";
        cmds += "?remName Name  - Removes a name from the Dragons List that was bugged.\n";
        cmds += "?givecash Amount - Gives a user or yourself cash\n";
        cmds += "?addNPC Object - Adds an NPC type x?npc to see what the obj looks like.\n";
        cmds += "?regCastle Object - Adds an Castle type x?castle to see what you need to do.```";
        resp = cmds;
    } else {
        resp = "Sorry, you're not a moderator for this game.";
    }
>>

[#CONTINUE#]
?stats={init}
#js >>
    use DragonWars;
    use dwCastles;
    function commafy(inVal){
        var returnNum;
        if(inVal != null) {
            var dat = inVal.toString();
            var arrTheNumber = dat.split("").reverse();
            var newNum = Array();
            for(var i=0; i<arrTheNumber.length; i++){
                newNum[newNum.length] = ((i%3===2) && (i<arrTheNumber.length-1)) ? "," + arrTheNumber[i]: arrTheNumber[i];
            }
            returnNum = newNum.reverse().join("");
        } else {
            returnNum = inVal;
        }
       return returnNum;
    }
    if(DragonWars["Mode"] == "online") {
        if(DragonWars[RawUserID]) {
            var obj = JSON.parse(DragonWars[RawUserID]);
            var castles = JSON.parse(dwCastles["Data"]);
            var att = obj.Dragon.Stats.Attack;
            var def = obj.Dragon.Stats.Defense;
            var hlt = obj.Dragon.Stats.Health;
            var spd = obj.Dragon.Stats.Speed;
            var batt = 0;
            var bdef = 0;
            var bhlt = 0;
            var bexp = 0;
            var bspd = 0;
            var castleList = "";
            var tick = 0;

            for(i = 0; i < castles.length; i++) {
                var dragonsid = obj.Dragon.ID.toString();
                if(castles[i].OwnedBy == dragonsid) {
                    if(tick == 0) {
                        castleList += "*Castles that you own:*\n--------\n";
                    }
                    tick += 1;
                    castleList += "**" + castles[i].Name + "** *(+" + castles[i].Boost.Amount + " " + castles[i].Boost.Type + ")*\n";
                    if(castles[i].Boost.Type == "Attack") {
                        batt += castles[i].Boost.Amount;
                    }
                    if(castles[i].Boost.Type == "Health") {
                        bhlt += castles[i].Boost.Amount;
                    }
                    if(castles[i].Boost.Type == "Defense") {
                        bdef += castles[i].Boost.Amount;
                    }
                    if(castles[i].Boost.Type == "Speed") {
                        bspd += castles[i].Boost.Amount;
                    }
                    if(castles[i].Boost.Type == "Exp") {
                        bexp += castles[i].Boost.Amount;
                    }
                    if(i == castles.length) {
                        castleList += "--------\n";
                    }
                }
            }

            var dat = "";
            var color = "#fff";
            var thumb = "";
            if(obj.Dragon.Stats.Type == "fire") { color = "#9C2A00"; thumb = "https://proxikal.github.io/Echo/Intralink/DragonWars/FireDragon.png"; }
            if(obj.Dragon.Stats.Type == "grass") { color = "#00FF00"; thumb = "https://proxikal.github.io/Echo/Intralink/DragonWars/GrassDragon.png"; }
            if(obj.Dragon.Stats.Type == "water") { color = "#0077be"; thumb = "https://proxikal.github.io/Echo/Intralink/DragonWars/WaterDragon.png"; }
            if(obj.Dragon.Stats.Type == "rock") { color = "#f4a460"; thumb = "https://proxikal.github.io/Echo/Intralink/DragonWars/RockDragon.png"; }
            if(obj.Dragon.Stats.Type == "steel") { color = "#b0c4de"; thumb = "https://proxikal.github.io/Echo/Intralink/DragonWars/SteelDragon.png"; }
            if(obj.Dragon.Stats.Type == "dark") { color = "#a9a9a9"; thumb = "https://proxikal.github.io/Echo/Intralink/DragonWars/DarkDragon.png"; }
            if(obj.Dragon.Stats.Type == "light") { color = "#C3C3C3"; thumb = "https://proxikal.github.io/Echo/Intralink/DragonWars/LightDragon.png"; }

            var saveFile = false;
            var now = Math.floor(Date.now() / 1000);
            var overall = (att + def + hlt + spd).toString();
            var emb = {};
            emb.title = obj.Dragon.Name + " Information.";
            emb.color = HTML2Int(color);
            emb.description = castleList;
            var thumbnail = {
                url: thumb
            };
            if(thumbnail != null) {
                emb.thumbnail = thumbnail;
            }
            var fields = new Array();
            var f1 = {
                name: "Attack",
                value: "(" + commafy(att) + "+" + commafy(batt) + ")",
                inline: true
            };
            var f2 = {
                name: "Defense",
                value: "(" + commafy(def) + "+" + commafy(bdef) + ")",
                inline: true
            };
            var f3 = {
                name: "Health",
                value: "(" + commafy(hlt) + "+" + commafy(bhlt) + ")",
                inline: true
            };
            var f4 = {
                name: "Speed",
                value: "(" + commafy(spd) + "+"+commafy(bspd)+")",
                inline: true
            };
            var f5 = {
                name: "Exp",
                value: "(" + commafy(obj.Exp) + "+"+commafy(bexp)+")",
                inline: true
            };
            var f6 = {
                name: "Cash",
                value: "($"+commafy(obj.Cash)+")",
                inline: true
            };
            var f7 = {
                name: "Tokens",
                value: "("+commafy(obj.Tokens)+")",
                inline: true
            };
            var f8 = {
                name: "PVP Wins",
                value: commafy(obj.Win).toString(),
                inline: true
            };
            var f9 = {
                name: "PVP Losses",
                value: commafy(obj.Loss).toString(),
                inline: true
            };
            var f10 = {
                name: "NPC Wins",
                value: commafy(obj.NPCWins).toString(),
                inline: true
            };
            var f11 = {
                name: "NPC Losses",
                value: commafy(obj.NPCLoss).toString(),
                inline: true
            };
            var f12 = {
                name: "Castle Wins",
                value: commafy(obj.Takeovers).toString(),
                inline: true
            };


            fields.push(f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12);
            emb.fields = fields;
            var footer = {
                text: "Dragon Type: ("+obj.Dragon.Stats.Type.toUpperCase()+") -- Overall Stats: " + commafy(overall) + " / " + commafy(DragonWars["statLimit"])
            };
            emb.footer = footer;
            if(saveFile == true) {
                DragonWars[RawUserID] = JSON.stringify(obj);
            }
            resp = emb;
        } else {
            resp = "You need to register to the game in order to play! Type: `?register`";
        }
    } else {
        resp = DragonWars["ModeMsg"];
    }
>>

[#CONTINUE#]
&?leaderboard {params}={init}
#js >>
    use DragonWars;
    use dwCastles;
    import "https://raw.githubusercontent.com/proxikal/Echo/master/Javascript/dwFunc.js";
    var Database = sortObject(DragonWars);
    var Castles = JSON.parse(dwCastles["Data"]);
    
    var Dragons = [];
    
    var del = [];
    for (i = 0; i < Object.keys(Database).length; i++) {
        if (RegExp(/[^0-9]/g).test(Object.keys(Database)[i])) {
            del.push(Object.keys(Database)[i]);
        }
    }
    for (i = 0; i < del.length; i++) {
        delete Database[del[i]];
    }

    var Based = "";
    if(Params == "?leaderboard" || Params == "") {
        Params = "-att";
    }
    if (Params === "-att") {
        Based = "Attack";
    } else if (Params === "-def") {
        Based = "Defense";
    } else if (Params === "-health") {
        Based = "Health"
    } else if (Params == "-spd") {
        Based = "Speed";
    } else if (Params == "-win") {
        Based = "Win";
    } else if (Params == "-loss") {
        Based = "Loss";
    } else if (Params == "-tokens") {
        Based = "Tokens";
    } else if (Params == "-cash") {
        Based = "Cash";
    } else if (Params == "-exp") {
        Based = "Exp";
    };

    for (i = 0; i < Object.keys(Database).length; i++) {
        var dragonIDS = new Array();
        var Dragon = {
            "Name": JSON.parse(Database[Object.keys(Database)[i]]).Dragon.Name
        }
        dragonIDS.push(JSON.parse(Database[Object.keys(Database)[i]]).Dragon.ID);

        if(Based != "Win" && Based != "Loss" && Based != "Tokens" && Based != "Cash" && Based != "Exp") {
            if (JSON.parse(Database[Object.keys(Database)[i]]).hasOwnProperty("Stables")) {
                for (j = 0; j < JSON.parse(Database[Object.keys(Database)[i]]).Stables.length; j++) {
                    dragonIDS.push(JSON.parse(Database[Object.keys(Database)[i]]).Stables[j].ID);
                    var Dragon2 = {
                        "Name": JSON.parse(Database[Object.keys(Database)[i]]).Stables[j].Name
                    }
                    Dragon2[Based] = JSON.parse(Database[Object.keys(Database)[i]]).Stables[j].Stats[Based];
                    Dragons.push(Dragon2);
                }
            }
            Dragon[Based] = JSON.parse(Database[Object.keys(Database)[i]]).Dragon.Stats[Based];
            for (h = 0; h < Castles.length; h++) {
                for(o = 0; o < dragonIDS.length; o++) {
                    if (Castles[h].OwnedBy === dragonIDS[o]) {
                        if(Based != "Win" && Based != "Loss" && Based != "Tokens" && Based != "Cash" && Based != "Exp") {
                            if (Castles[h].Boost.Type === Based) {
                                Dragon[Based] += Castles[h].Boost.Amount;
                                break;
                            }
                        }
                    }
                }
            }
            Dragons.push(Dragon);
        } else if(Based == "Win") {
            var Dragon = {
                "Name": JSON.parse(Database[Object.keys(Database)[i]]).Dragon.Name
            }
            Dragon[Based] = JSON.parse(Database[Object.keys(Database)[i]]).Win;
            Dragons.push(Dragon);
        } else if(Based == "Loss") {
            var Dragon = {
                "Name": JSON.parse(Database[Object.keys(Database)[i]]).Dragon.Name
            }
            Dragon[Based] = JSON.parse(Database[Object.keys(Database)[i]]).Loss;
            Dragons.push(Dragon);
        } else if(Based == "Tokens") {
            var Dragon = {
                "Name": JSON.parse(Database[Object.keys(Database)[i]]).Dragon.Name
            }
            Dragon[Based] = JSON.parse(Database[Object.keys(Database)[i]]).Tokens;
            Dragons.push(Dragon);
        } else if(Based == "Cash") {
            var Dragon = {
                "Name": JSON.parse(Database[Object.keys(Database)[i]]).Dragon.Name
            }
            Dragon[Based] = JSON.parse(Database[Object.keys(Database)[i]]).Cash;
            Dragons.push(Dragon);
        } else if(Based == "Exp") {
            var Dragon = {
                "Name": JSON.parse(Database[Object.keys(Database)[i]]).Dragon.Name
            }
            Dragon[Based] = JSON.parse(Database[Object.keys(Database)[i]]).Exp;
            Dragons.push(Dragon);
        }
    }
    for (k = 0; k < Dragons.length; k++) {
        if (Dragons[k][Based] === 0) {
            Dragons.splice(k, 1);
        }
    }
    var byStat = Dragons.slice(0);
    byStat.sort(function(a,b) {
        return b[Based] - a[Based];
    });
    var emb = {};
    var lblen = 15;
    if (Dragons.length < 15) {
        lblen = Dragons.length;
    }
    emb.title = "__Top " + lblen + " Dragons based on *" + Based + "*:__";
    
    var fields = [];
    var field1 = new Field();
    var field2 = new Field();
    var field3 = new Field();
    field1.name = "**Dragons:**";
    field2.name = "⠀";
    field3.name = "⠀";
    field3.value = "⠀";
    field3.inline = false;
    field1.value = "";
    field2.value = "";
    
    for (l = 0; l < lblen; l++) {
        field1.value += "**" + (l + 1) + ".** " + byStat[l].Name + "\n";
        field2.value += "*" + byStat[l][Based] + "*\n";
    }
    fields.push(field1);
    fields.push(field2);
    //fields.push(field3);
    emb.fields = fields;
    //emb.description = "**Params:** ```" + Params + "```";
    resp = emb;
>>

[#CONTINUE#]
&c?cancel {params}={init}
#js >>
    use DragonWars;
    use dwCastles;

    if(DragonWars[RawUserID]) {
        var obj = JSON.parse(DragonWars[RawUserID]);
        var castles = JSON.parse(dwCastles["Data"]);
        var exists = 0;
        var dragonids = [];
        dragonids.push(obj.Dragon.ID);
        if(obj.Stables != null) {
            for(i = 0; i < obj.Stables.length; i++) {
                dragonids.push(obj.Stables[i].ID);
            }
        }

        for(i = 0; i < castles.length; i++) {
            if(castles[i].Name == Params) {
                exists += 1;
                resp = "Castle is owned by: " + castles[i].OwnedBy;
                for(o = 0; o < dragonids.length; o++) {
                    var str = dragonids[o].toString();
                    if(str == castles[i].OwnedBy) {
                        castles[i].OwnedBy = "NPC";
                        dwCastles["Data"] = JSON.stringify(castles);
                        resp = "Your dragon has left `" + Params + "`";
                    }
                }
            }
        }
        if(exists == 0) {
            resp = "The castle doesn't exist under your siege.";
        }
    } else {
    	resp = "You have to register using `?register` before starting the game.";
    }
>>
